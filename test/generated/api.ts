/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface V1AdminConfigsGet200Response
 */
export interface V1AdminConfigsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsGet200ResponseData}
     * @memberof V1AdminConfigsGet200Response
     */
    'data': V1AdminConfigsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsGet200ResponseData
 */
export interface V1AdminConfigsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminConfigsIdGet200ResponseDataData>}
     * @memberof V1AdminConfigsGet200ResponseData
     */
    'data': Array<V1AdminConfigsIdGet200ResponseDataData>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminConfigsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdGet200Response
 */
export interface V1AdminConfigsIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsIdGet200ResponseData}
     * @memberof V1AdminConfigsIdGet200Response
     */
    'data': V1AdminConfigsIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdGet200ResponseData
 */
export interface V1AdminConfigsIdGet200ResponseData {
    /**
     * 
     * @type {V1AdminConfigsIdGet200ResponseDataData}
     * @memberof V1AdminConfigsIdGet200ResponseData
     */
    'data': V1AdminConfigsIdGet200ResponseDataData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdGet200ResponseDataData
 */
export interface V1AdminConfigsIdGet200ResponseDataData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'key': V1AdminConfigsIdGet200ResponseDataDataKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'value'?: string | null;
}

export const V1AdminConfigsIdGet200ResponseDataDataKeyEnum = {
    Empty: ''
} as const;

export type V1AdminConfigsIdGet200ResponseDataDataKeyEnum = typeof V1AdminConfigsIdGet200ResponseDataDataKeyEnum[keyof typeof V1AdminConfigsIdGet200ResponseDataDataKeyEnum];

/**
 * 
 * @export
 * @interface V1AdminConfigsIdPatch200Response
 */
export interface V1AdminConfigsIdPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminConfigsIdPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdPatchRequestBody
 */
export interface V1AdminConfigsIdPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdPatchRequestBody
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsPost200Response
 */
export interface V1AdminConfigsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsPost200ResponseData}
     * @memberof V1AdminConfigsPost200Response
     */
    'data': V1AdminConfigsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsPost200ResponseData
 */
export interface V1AdminConfigsPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPost200ResponseData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsPostRequestBody
 */
export interface V1AdminConfigsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPostRequestBody
     */
    'key': V1AdminConfigsPostRequestBodyKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPostRequestBody
     */
    'value'?: string | null;
}

export const V1AdminConfigsPostRequestBodyKeyEnum = {
    Empty: ''
} as const;

export type V1AdminConfigsPostRequestBodyKeyEnum = typeof V1AdminConfigsPostRequestBodyKeyEnum[keyof typeof V1AdminConfigsPostRequestBodyKeyEnum];

/**
 * 
 * @export
 * @interface V1AdminEventLogsGet200Response
 */
export interface V1AdminEventLogsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminEventLogsGet200ResponseData}
     * @memberof V1AdminEventLogsGet200Response
     */
    'data': V1AdminEventLogsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsGet200ResponseData
 */
export interface V1AdminEventLogsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminEventLogsGet200ResponseDataDataInner>}
     * @memberof V1AdminEventLogsGet200ResponseData
     */
    'data': Array<V1AdminEventLogsGet200ResponseDataDataInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsGet200ResponseDataDataInner
 */
export interface V1AdminEventLogsGet200ResponseDataDataInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'type': V1AdminEventLogsGet200ResponseDataDataInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'dataId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'sessionUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200ResponseDataDataInner
     */
    'data'?: string | null;
}

export const V1AdminEventLogsGet200ResponseDataDataInnerTypeEnum = {
    FileCreated: 'file.created',
    FileUpdated: 'file.updated',
    FileDeleted: 'file.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    ProductAttributeCreated: 'product.attribute.created',
    ProductAttributeUpdated: 'product.attribute.updated',
    ProductAttributeDeleted: 'product.attribute.deleted',
    ProductDiscountCreated: 'product.discount.created',
    ProductDiscountDeleted: 'product.discount.deleted',
    ProductReviewCreated: 'product.review.created',
    ProductReviewUpdated: 'product.review.updated',
    ProductReviewDeleted: 'product.review.deleted',
    ProductStoreCreated: 'product.store.created',
    ProductStoreDeleted: 'product.store.deleted',
    ProductOrderCreated: 'product.order.created',
    ProductFileCreated: 'product.file.created',
    ProductFileDeleted: 'product.file.deleted',
    StoreCreated: 'store.created',
    StoreUpdated: 'store.updated',
    StoreDeleted: 'store.deleted',
    StoreProductCreated: 'store.product.created',
    StoreProductDeleted: 'store.product.deleted',
    StoreReviewCreated: 'store.review.created',
    StoreReviewUpdated: 'store.review.updated',
    StoreReviewDeleted: 'store.review.deleted',
    StoreFileCreated: 'store.file.created',
    StoreFileDeleted: 'store.file.deleted',
    OrderCreated: 'order.created',
    OrderProductCreated: 'order.product.created',
    OrderHistoryCreated: 'order.history.created',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceLineItemCreated: 'invoice.line_item.created',
    InvoiceLineItemUpdated: 'invoice.line_item.updated',
    InvoiceLineItemDeleted: 'invoice.line_item.deleted'
} as const;

export type V1AdminEventLogsGet200ResponseDataDataInnerTypeEnum = typeof V1AdminEventLogsGet200ResponseDataDataInnerTypeEnum[keyof typeof V1AdminEventLogsGet200ResponseDataDataInnerTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminEventLogsPost200Response
 */
export interface V1AdminEventLogsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsPost200ResponseData}
     * @memberof V1AdminEventLogsPost200Response
     */
    'data': V1AdminConfigsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsPostRequestBody
 */
export interface V1AdminEventLogsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'type': V1AdminEventLogsPostRequestBodyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'dataId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'sessionUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'data'?: string | null;
}

export const V1AdminEventLogsPostRequestBodyTypeEnum = {
    FileCreated: 'file.created',
    FileUpdated: 'file.updated',
    FileDeleted: 'file.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    ProductAttributeCreated: 'product.attribute.created',
    ProductAttributeUpdated: 'product.attribute.updated',
    ProductAttributeDeleted: 'product.attribute.deleted',
    ProductDiscountCreated: 'product.discount.created',
    ProductDiscountDeleted: 'product.discount.deleted',
    ProductReviewCreated: 'product.review.created',
    ProductReviewUpdated: 'product.review.updated',
    ProductReviewDeleted: 'product.review.deleted',
    ProductStoreCreated: 'product.store.created',
    ProductStoreDeleted: 'product.store.deleted',
    ProductOrderCreated: 'product.order.created',
    ProductFileCreated: 'product.file.created',
    ProductFileDeleted: 'product.file.deleted',
    StoreCreated: 'store.created',
    StoreUpdated: 'store.updated',
    StoreDeleted: 'store.deleted',
    StoreProductCreated: 'store.product.created',
    StoreProductDeleted: 'store.product.deleted',
    StoreReviewCreated: 'store.review.created',
    StoreReviewUpdated: 'store.review.updated',
    StoreReviewDeleted: 'store.review.deleted',
    StoreFileCreated: 'store.file.created',
    StoreFileDeleted: 'store.file.deleted',
    OrderCreated: 'order.created',
    OrderProductCreated: 'order.product.created',
    OrderHistoryCreated: 'order.history.created',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceLineItemCreated: 'invoice.line_item.created',
    InvoiceLineItemUpdated: 'invoice.line_item.updated',
    InvoiceLineItemDeleted: 'invoice.line_item.deleted'
} as const;

export type V1AdminEventLogsPostRequestBodyTypeEnum = typeof V1AdminEventLogsPostRequestBodyTypeEnum[keyof typeof V1AdminEventLogsPostRequestBodyTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200Response
 */
export interface V1AdminEventLogsStatsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminEventLogsStatsGet200ResponseData}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'data': V1AdminEventLogsStatsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200ResponseData
 */
export interface V1AdminEventLogsStatsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminEventLogsStatsGet200ResponseDataDataInner>}
     * @memberof V1AdminEventLogsStatsGet200ResponseData
     */
    'data': Array<V1AdminEventLogsStatsGet200ResponseDataDataInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsStatsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200ResponseDataDataInner
 */
export interface V1AdminEventLogsStatsGet200ResponseDataDataInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataDataInner
     */
    'type': V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataDataInner
     */
    'count': number;
}

export const V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum = {
    FileCreated: 'file.created',
    FileUpdated: 'file.updated',
    FileDeleted: 'file.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    ProductAttributeCreated: 'product.attribute.created',
    ProductAttributeUpdated: 'product.attribute.updated',
    ProductAttributeDeleted: 'product.attribute.deleted',
    ProductDiscountCreated: 'product.discount.created',
    ProductDiscountDeleted: 'product.discount.deleted',
    ProductReviewCreated: 'product.review.created',
    ProductReviewUpdated: 'product.review.updated',
    ProductReviewDeleted: 'product.review.deleted',
    ProductStoreCreated: 'product.store.created',
    ProductStoreDeleted: 'product.store.deleted',
    ProductOrderCreated: 'product.order.created',
    ProductFileCreated: 'product.file.created',
    ProductFileDeleted: 'product.file.deleted',
    StoreCreated: 'store.created',
    StoreUpdated: 'store.updated',
    StoreDeleted: 'store.deleted',
    StoreProductCreated: 'store.product.created',
    StoreProductDeleted: 'store.product.deleted',
    StoreReviewCreated: 'store.review.created',
    StoreReviewUpdated: 'store.review.updated',
    StoreReviewDeleted: 'store.review.deleted',
    StoreFileCreated: 'store.file.created',
    StoreFileDeleted: 'store.file.deleted',
    OrderCreated: 'order.created',
    OrderProductCreated: 'order.product.created',
    OrderHistoryCreated: 'order.history.created',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceLineItemCreated: 'invoice.line_item.created',
    InvoiceLineItemUpdated: 'invoice.line_item.updated',
    InvoiceLineItemDeleted: 'invoice.line_item.deleted'
} as const;

export type V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum = typeof V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum[keyof typeof V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum];


/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get configs
         * @summary Get configs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'key' | 'value', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get config
         * @summary Get config
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminConfigsIdGet', 'id', id)
            const localVarPath = `/v1/admin/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update config
         * @summary Update config
         * @param {string} id 
         * @param {V1AdminConfigsIdPatchRequestBody} v1AdminConfigsIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdPatch: async (id: string, v1AdminConfigsIdPatchRequestBody: V1AdminConfigsIdPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminConfigsIdPatch', 'id', id)
            // verify required parameter 'v1AdminConfigsIdPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminConfigsIdPatch', 'v1AdminConfigsIdPatchRequestBody', v1AdminConfigsIdPatchRequestBody)
            const localVarPath = `/v1/admin/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminConfigsIdPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create config
         * @summary Create config
         * @param {V1AdminConfigsPostRequestBody} v1AdminConfigsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsPost: async (v1AdminConfigsPostRequestBody: V1AdminConfigsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminConfigsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminConfigsPost', 'v1AdminConfigsPostRequestBody', v1AdminConfigsPostRequestBody)
            const localVarPath = `/v1/admin/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminConfigsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get event logs
         * @summary Get event logs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/event_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create event log
         * @summary Create event log
         * @param {V1AdminEventLogsPostRequestBody} v1AdminEventLogsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsPost: async (v1AdminEventLogsPostRequestBody: V1AdminEventLogsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminEventLogsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminEventLogsPost', 'v1AdminEventLogsPostRequestBody', v1AdminEventLogsPostRequestBody)
            const localVarPath = `/v1/admin/event_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminEventLogsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {'day'} [interval] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsStatsGet: async (interval?: 'day', from?: string, to?: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/event_logs/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Get configs
         * @summary Get configs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'key' | 'value', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get config
         * @summary Get config
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update config
         * @summary Update config
         * @param {string} id 
         * @param {V1AdminConfigsIdPatchRequestBody} v1AdminConfigsIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsIdPatch(id: string, v1AdminConfigsIdPatchRequestBody: V1AdminConfigsIdPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsIdPatch(id, v1AdminConfigsIdPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create config
         * @summary Create config
         * @param {V1AdminConfigsPostRequestBody} v1AdminConfigsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsPost(v1AdminConfigsPostRequestBody: V1AdminConfigsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsPost(v1AdminConfigsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get event logs
         * @summary Get event logs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create event log
         * @summary Create event log
         * @param {V1AdminEventLogsPostRequestBody} v1AdminEventLogsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsPost(v1AdminEventLogsPostRequestBody: V1AdminEventLogsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsPost(v1AdminEventLogsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {'day'} [interval] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsStatsGet(interval?: 'day', from?: string, to?: string, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsStatsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsStatsGet(interval, from, to, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Get configs
         * @summary Get configs
         * @param {AdminApiV1AdminConfigsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsGet(requestParameters: AdminApiV1AdminConfigsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsGet200Response> {
            return localVarFp.v1AdminConfigsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get config
         * @summary Get config
         * @param {AdminApiV1AdminConfigsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdGet(requestParameters: AdminApiV1AdminConfigsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsIdGet200Response> {
            return localVarFp.v1AdminConfigsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update config
         * @summary Update config
         * @param {AdminApiV1AdminConfigsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdPatch(requestParameters: AdminApiV1AdminConfigsIdPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsIdPatch200Response> {
            return localVarFp.v1AdminConfigsIdPatch(requestParameters.id, requestParameters.v1AdminConfigsIdPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create config
         * @summary Create config
         * @param {AdminApiV1AdminConfigsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsPost(requestParameters: AdminApiV1AdminConfigsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsPost200Response> {
            return localVarFp.v1AdminConfigsPost(requestParameters.v1AdminConfigsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get event logs
         * @summary Get event logs
         * @param {AdminApiV1AdminEventLogsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsGet(requestParameters: AdminApiV1AdminEventLogsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsGet200Response> {
            return localVarFp.v1AdminEventLogsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Create event log
         * @summary Create event log
         * @param {AdminApiV1AdminEventLogsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsPost(requestParameters: AdminApiV1AdminEventLogsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsPost200Response> {
            return localVarFp.v1AdminEventLogsPost(requestParameters.v1AdminEventLogsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {AdminApiV1AdminEventLogsStatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsStatsGet(requestParameters: AdminApiV1AdminEventLogsStatsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsStatsGet200Response> {
            return localVarFp.v1AdminEventLogsStatsGet(requestParameters.interval, requestParameters.from, requestParameters.to, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1AdminConfigsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsGetRequest
 */
export interface AdminApiV1AdminConfigsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<''>}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly expand?: Array<''>
}

/**
 * Request parameters for v1AdminConfigsIdGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsIdGetRequest
 */
export interface AdminApiV1AdminConfigsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminConfigsIdPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsIdPatchRequest
 */
export interface AdminApiV1AdminConfigsIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {V1AdminConfigsIdPatchRequestBody}
     * @memberof AdminApiV1AdminConfigsIdPatch
     */
    readonly v1AdminConfigsIdPatchRequestBody: V1AdminConfigsIdPatchRequestBody
}

/**
 * Request parameters for v1AdminConfigsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsPostRequest
 */
export interface AdminApiV1AdminConfigsPostRequest {
    /**
     * 
     * @type {V1AdminConfigsPostRequestBody}
     * @memberof AdminApiV1AdminConfigsPost
     */
    readonly v1AdminConfigsPostRequestBody: V1AdminConfigsPostRequestBody
}

/**
 * Request parameters for v1AdminEventLogsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsGetRequest
 */
export interface AdminApiV1AdminEventLogsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<''>}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly expand?: Array<''>
}

/**
 * Request parameters for v1AdminEventLogsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsPostRequest
 */
export interface AdminApiV1AdminEventLogsPostRequest {
    /**
     * 
     * @type {V1AdminEventLogsPostRequestBody}
     * @memberof AdminApiV1AdminEventLogsPost
     */
    readonly v1AdminEventLogsPostRequestBody: V1AdminEventLogsPostRequestBody
}

/**
 * Request parameters for v1AdminEventLogsStatsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsStatsGetRequest
 */
export interface AdminApiV1AdminEventLogsStatsGetRequest {
    /**
     * 
     * @type {'day'}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly interval?: 'day'

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly from?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly to?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly offset?: number
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * Get configs
     * @summary Get configs
     * @param {AdminApiV1AdminConfigsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsGet(requestParameters: AdminApiV1AdminConfigsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get config
     * @summary Get config
     * @param {AdminApiV1AdminConfigsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsIdGet(requestParameters: AdminApiV1AdminConfigsIdGetRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update config
     * @summary Update config
     * @param {AdminApiV1AdminConfigsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsIdPatch(requestParameters: AdminApiV1AdminConfigsIdPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsIdPatch(requestParameters.id, requestParameters.v1AdminConfigsIdPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create config
     * @summary Create config
     * @param {AdminApiV1AdminConfigsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsPost(requestParameters: AdminApiV1AdminConfigsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsPost(requestParameters.v1AdminConfigsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get event logs
     * @summary Get event logs
     * @param {AdminApiV1AdminEventLogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsGet(requestParameters: AdminApiV1AdminEventLogsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create event log
     * @summary Create event log
     * @param {AdminApiV1AdminEventLogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsPost(requestParameters: AdminApiV1AdminEventLogsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsPost(requestParameters.v1AdminEventLogsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get event logs statistics
     * @summary Get event logs statistics
     * @param {AdminApiV1AdminEventLogsStatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsStatsGet(requestParameters: AdminApiV1AdminEventLogsStatsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsStatsGet(requestParameters.interval, requestParameters.from, requestParameters.to, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}


