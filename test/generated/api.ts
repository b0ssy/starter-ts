/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface V1AdminConfigsGet200Response
 */
export interface V1AdminConfigsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsGet200ResponseData}
     * @memberof V1AdminConfigsGet200Response
     */
    'data': V1AdminConfigsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsGet200ResponseData
 */
export interface V1AdminConfigsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminConfigsIdGet200ResponseDataData>}
     * @memberof V1AdminConfigsGet200ResponseData
     */
    'data': Array<V1AdminConfigsIdGet200ResponseDataData>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminConfigsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdGet200Response
 */
export interface V1AdminConfigsIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminConfigsIdGet200ResponseData}
     * @memberof V1AdminConfigsIdGet200Response
     */
    'data': V1AdminConfigsIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdGet200ResponseData
 */
export interface V1AdminConfigsIdGet200ResponseData {
    /**
     * 
     * @type {V1AdminConfigsIdGet200ResponseDataData}
     * @memberof V1AdminConfigsIdGet200ResponseData
     */
    'data': V1AdminConfigsIdGet200ResponseDataData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdGet200ResponseDataData
 */
export interface V1AdminConfigsIdGet200ResponseDataData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'key': V1AdminConfigsIdGet200ResponseDataDataKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdGet200ResponseDataData
     */
    'value'?: string | null;
}

export const V1AdminConfigsIdGet200ResponseDataDataKeyEnum = {
    Empty: ''
} as const;

export type V1AdminConfigsIdGet200ResponseDataDataKeyEnum = typeof V1AdminConfigsIdGet200ResponseDataDataKeyEnum[keyof typeof V1AdminConfigsIdGet200ResponseDataDataKeyEnum];

/**
 * 
 * @export
 * @interface V1AdminConfigsIdPatch200Response
 */
export interface V1AdminConfigsIdPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminConfigsIdPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsIdPatchRequestBody
 */
export interface V1AdminConfigsIdPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsIdPatchRequestBody
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsPost200Response
 */
export interface V1AdminConfigsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsPost200ResponseData}
     * @memberof V1AdminConfigsPost200Response
     */
    'data': V1AdminProductsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminConfigsPostRequestBody
 */
export interface V1AdminConfigsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPostRequestBody
     */
    'key': V1AdminConfigsPostRequestBodyKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminConfigsPostRequestBody
     */
    'value'?: string | null;
}

export const V1AdminConfigsPostRequestBodyKeyEnum = {
    Empty: ''
} as const;

export type V1AdminConfigsPostRequestBodyKeyEnum = typeof V1AdminConfigsPostRequestBodyKeyEnum[keyof typeof V1AdminConfigsPostRequestBodyKeyEnum];

/**
 * 
 * @export
 * @interface V1AdminEventLogsGet200Response
 */
export interface V1AdminEventLogsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminEventLogsGet200ResponseData}
     * @memberof V1AdminEventLogsGet200Response
     */
    'data': V1AdminEventLogsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsGet200ResponseData
 */
export interface V1AdminEventLogsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>}
     * @memberof V1AdminEventLogsGet200ResponseData
     */
    'data': Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsPost200Response
 */
export interface V1AdminEventLogsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsPost200ResponseData}
     * @memberof V1AdminEventLogsPost200Response
     */
    'data': V1AdminProductsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsPostRequestBody
 */
export interface V1AdminEventLogsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'type': V1AdminEventLogsPostRequestBodyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'dataId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'sessionUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsPostRequestBody
     */
    'data'?: string | null;
}

export const V1AdminEventLogsPostRequestBodyTypeEnum = {
    FileCreated: 'file.created',
    FileUpdated: 'file.updated',
    FileDeleted: 'file.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    ProductAttributeCreated: 'product.attribute.created',
    ProductAttributeUpdated: 'product.attribute.updated',
    ProductAttributeDeleted: 'product.attribute.deleted',
    ProductDiscountCreated: 'product.discount.created',
    ProductDiscountDeleted: 'product.discount.deleted',
    ProductReviewCreated: 'product.review.created',
    ProductReviewUpdated: 'product.review.updated',
    ProductReviewDeleted: 'product.review.deleted',
    ProductStoreCreated: 'product.store.created',
    ProductStoreDeleted: 'product.store.deleted',
    ProductOrderCreated: 'product.order.created',
    ProductFileCreated: 'product.file.created',
    ProductFileDeleted: 'product.file.deleted',
    StoreCreated: 'store.created',
    StoreUpdated: 'store.updated',
    StoreDeleted: 'store.deleted',
    StoreProductCreated: 'store.product.created',
    StoreProductDeleted: 'store.product.deleted',
    StoreReviewCreated: 'store.review.created',
    StoreReviewUpdated: 'store.review.updated',
    StoreReviewDeleted: 'store.review.deleted',
    StoreFileCreated: 'store.file.created',
    StoreFileDeleted: 'store.file.deleted',
    OrderCreated: 'order.created',
    OrderProductCreated: 'order.product.created',
    OrderHistoryCreated: 'order.history.created',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceLineItemCreated: 'invoice.line_item.created',
    InvoiceLineItemUpdated: 'invoice.line_item.updated',
    InvoiceLineItemDeleted: 'invoice.line_item.deleted'
} as const;

export type V1AdminEventLogsPostRequestBodyTypeEnum = typeof V1AdminEventLogsPostRequestBodyTypeEnum[keyof typeof V1AdminEventLogsPostRequestBodyTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200Response
 */
export interface V1AdminEventLogsStatsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminEventLogsStatsGet200ResponseData}
     * @memberof V1AdminEventLogsStatsGet200Response
     */
    'data': V1AdminEventLogsStatsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200ResponseData
 */
export interface V1AdminEventLogsStatsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminEventLogsStatsGet200ResponseDataDataInner>}
     * @memberof V1AdminEventLogsStatsGet200ResponseData
     */
    'data': Array<V1AdminEventLogsStatsGet200ResponseDataDataInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsStatsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminEventLogsStatsGet200ResponseDataDataInner
 */
export interface V1AdminEventLogsStatsGet200ResponseDataDataInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataDataInner
     */
    'type': V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminEventLogsStatsGet200ResponseDataDataInner
     */
    'count': number;
}

export const V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum = {
    FileCreated: 'file.created',
    FileUpdated: 'file.updated',
    FileDeleted: 'file.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    ProductAttributeCreated: 'product.attribute.created',
    ProductAttributeUpdated: 'product.attribute.updated',
    ProductAttributeDeleted: 'product.attribute.deleted',
    ProductDiscountCreated: 'product.discount.created',
    ProductDiscountDeleted: 'product.discount.deleted',
    ProductReviewCreated: 'product.review.created',
    ProductReviewUpdated: 'product.review.updated',
    ProductReviewDeleted: 'product.review.deleted',
    ProductStoreCreated: 'product.store.created',
    ProductStoreDeleted: 'product.store.deleted',
    ProductOrderCreated: 'product.order.created',
    ProductFileCreated: 'product.file.created',
    ProductFileDeleted: 'product.file.deleted',
    StoreCreated: 'store.created',
    StoreUpdated: 'store.updated',
    StoreDeleted: 'store.deleted',
    StoreProductCreated: 'store.product.created',
    StoreProductDeleted: 'store.product.deleted',
    StoreReviewCreated: 'store.review.created',
    StoreReviewUpdated: 'store.review.updated',
    StoreReviewDeleted: 'store.review.deleted',
    StoreFileCreated: 'store.file.created',
    StoreFileDeleted: 'store.file.deleted',
    OrderCreated: 'order.created',
    OrderProductCreated: 'order.product.created',
    OrderHistoryCreated: 'order.history.created',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceLineItemCreated: 'invoice.line_item.created',
    InvoiceLineItemUpdated: 'invoice.line_item.updated',
    InvoiceLineItemDeleted: 'invoice.line_item.deleted'
} as const;

export type V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum = typeof V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum[keyof typeof V1AdminEventLogsStatsGet200ResponseDataDataInnerTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminOrdersGet200Response
 */
export interface V1AdminOrdersGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminOrdersGet200ResponseData}
     * @memberof V1AdminOrdersGet200Response
     */
    'data': V1AdminOrdersGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminOrdersGet200ResponseData
 */
export interface V1AdminOrdersGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminOrdersGet200ResponseDataDataInner>}
     * @memberof V1AdminOrdersGet200ResponseData
     */
    'data': Array<V1AdminOrdersGet200ResponseDataDataInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminOrdersGet200ResponseDataDataInner
 */
export interface V1AdminOrdersGet200ResponseDataDataInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'currency'?: V1AdminOrdersGet200ResponseDataDataInnerCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'totalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersGet200ResponseDataDataInner
     */
    'totalDiscount'?: number | null;
}

export const V1AdminOrdersGet200ResponseDataDataInnerCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminOrdersGet200ResponseDataDataInnerCurrencyEnum = typeof V1AdminOrdersGet200ResponseDataDataInnerCurrencyEnum[keyof typeof V1AdminOrdersGet200ResponseDataDataInnerCurrencyEnum];

/**
 * 
 * @export
 * @interface V1AdminOrdersIdGet200Response
 */
export interface V1AdminOrdersIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminOrdersIdGet200ResponseData}
     * @memberof V1AdminOrdersIdGet200Response
     */
    'data': V1AdminOrdersIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminOrdersIdGet200ResponseData
 */
export interface V1AdminOrdersIdGet200ResponseData {
    /**
     * 
     * @type {V1AdminOrdersIdGet200ResponseDataData}
     * @memberof V1AdminOrdersIdGet200ResponseData
     */
    'data': V1AdminOrdersIdGet200ResponseDataData;
}
/**
 * 
 * @export
 * @interface V1AdminOrdersIdGet200ResponseDataData
 */
export interface V1AdminOrdersIdGet200ResponseDataData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'currency'?: V1AdminOrdersIdGet200ResponseDataDataCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'totalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'totalDiscount'?: number | null;
    /**
     * 
     * @type {Array<V1AdminProductsGet200ResponseDataDataInner>}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'products'?: Array<V1AdminProductsGet200ResponseDataDataInner>;
    /**
     * 
     * @type {Array<V1AdminOrdersIdGet200ResponseDataDataHistoriesInner>}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'histories'?: Array<V1AdminOrdersIdGet200ResponseDataDataHistoriesInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>}
     * @memberof V1AdminOrdersIdGet200ResponseDataData
     */
    'eventLogs'?: Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>;
}

export const V1AdminOrdersIdGet200ResponseDataDataCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminOrdersIdGet200ResponseDataDataCurrencyEnum = typeof V1AdminOrdersIdGet200ResponseDataDataCurrencyEnum[keyof typeof V1AdminOrdersIdGet200ResponseDataDataCurrencyEnum];

/**
 * 
 * @export
 * @interface V1AdminOrdersIdGet200ResponseDataDataHistoriesInner
 */
export interface V1AdminOrdersIdGet200ResponseDataDataHistoriesInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataDataHistoriesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataDataHistoriesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataDataHistoriesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataDataHistoriesInner
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersIdGet200ResponseDataDataHistoriesInner
     */
    'status'?: V1AdminOrdersIdGet200ResponseDataDataHistoriesInnerStatusEnum;
}

export const V1AdminOrdersIdGet200ResponseDataDataHistoriesInnerStatusEnum = {
    Pending: 'pending',
    Processing: 'processing',
    Onhold: 'onhold',
    Completed: 'completed',
    Cancelled: 'cancelled',
    Refunded: 'refunded',
    Failed: 'failed'
} as const;

export type V1AdminOrdersIdGet200ResponseDataDataHistoriesInnerStatusEnum = typeof V1AdminOrdersIdGet200ResponseDataDataHistoriesInnerStatusEnum[keyof typeof V1AdminOrdersIdGet200ResponseDataDataHistoriesInnerStatusEnum];

/**
 * 
 * @export
 * @interface V1AdminOrdersPost200Response
 */
export interface V1AdminOrdersPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsPost200ResponseData}
     * @memberof V1AdminOrdersPost200Response
     */
    'data': V1AdminProductsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminOrdersPostRequestBody
 */
export interface V1AdminOrdersPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersPostRequestBody
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminOrdersPostRequestBody
     */
    'currency'?: V1AdminOrdersPostRequestBodyCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersPostRequestBody
     */
    'totalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminOrdersPostRequestBody
     */
    'totalDiscount'?: number | null;
}

export const V1AdminOrdersPostRequestBodyCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminOrdersPostRequestBodyCurrencyEnum = typeof V1AdminOrdersPostRequestBodyCurrencyEnum[keyof typeof V1AdminOrdersPostRequestBodyCurrencyEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsFilesProductFileIdDelete200Response
 */
export interface V1AdminProductsFilesProductFileIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsFilesProductFileIdDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsFilesProductFileIdDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminProductsFilesProductFileIdDelete200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminProductsGet200Response
 */
export interface V1AdminProductsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsGet200ResponseData}
     * @memberof V1AdminProductsGet200Response
     */
    'data': V1AdminProductsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminProductsGet200ResponseData
 */
export interface V1AdminProductsGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminProductsGet200ResponseDataDataInner>}
     * @memberof V1AdminProductsGet200ResponseData
     */
    'data': Array<V1AdminProductsGet200ResponseDataDataInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminProductsGet200ResponseDataDataInner
 */
export interface V1AdminProductsGet200ResponseDataDataInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'type'?: V1AdminProductsGet200ResponseDataDataInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'category'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'currency'?: V1AdminProductsGet200ResponseDataDataInnerCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'buyMinimumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'buyMaximumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'buyGroupOfQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'sku'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'stockQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsGet200ResponseDataDataInner
     */
    'visiblility'?: V1AdminProductsGet200ResponseDataDataInnerVisiblilityEnum;
}

export const V1AdminProductsGet200ResponseDataDataInnerTypeEnum = {
    Basic: 'basic',
    Group: 'group'
} as const;

export type V1AdminProductsGet200ResponseDataDataInnerTypeEnum = typeof V1AdminProductsGet200ResponseDataDataInnerTypeEnum[keyof typeof V1AdminProductsGet200ResponseDataDataInnerTypeEnum];
export const V1AdminProductsGet200ResponseDataDataInnerCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminProductsGet200ResponseDataDataInnerCurrencyEnum = typeof V1AdminProductsGet200ResponseDataDataInnerCurrencyEnum[keyof typeof V1AdminProductsGet200ResponseDataDataInnerCurrencyEnum];
export const V1AdminProductsGet200ResponseDataDataInnerVisiblilityEnum = {
    Visible: 'visible',
    Hidden: 'hidden'
} as const;

export type V1AdminProductsGet200ResponseDataDataInnerVisiblilityEnum = typeof V1AdminProductsGet200ResponseDataDataInnerVisiblilityEnum[keyof typeof V1AdminProductsGet200ResponseDataDataInnerVisiblilityEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdDelete200Response
 */
export interface V1AdminProductsIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminProductsIdDelete200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdFilesImagePost200Response
 */
export interface V1AdminProductsIdFilesImagePost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsIdFilesImagePost200ResponseData}
     * @memberof V1AdminProductsIdFilesImagePost200Response
     */
    'data': V1AdminProductsIdFilesImagePost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdFilesImagePost200ResponseData
 */
export interface V1AdminProductsIdFilesImagePost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePost200ResponseData
     */
    'fileId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePost200ResponseData
     */
    'productFileId': string;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdFilesImagePostRequestBody
 */
export interface V1AdminProductsIdFilesImagePostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePostRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {V1AdminProductsIdFilesImagePostRequestBodyUpload}
     * @memberof V1AdminProductsIdFilesImagePostRequestBody
     */
    'upload': V1AdminProductsIdFilesImagePostRequestBodyUpload;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdFilesImagePostRequestBodyUpload
 */
export interface V1AdminProductsIdFilesImagePostRequestBodyUpload {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePostRequestBodyUpload
     */
    'mime': V1AdminProductsIdFilesImagePostRequestBodyUploadMimeEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdFilesImagePostRequestBodyUpload
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdFilesImagePostRequestBodyUpload
     */
    'dataBase64': string;
}

export const V1AdminProductsIdFilesImagePostRequestBodyUploadMimeEnum = {
    Jpg: 'image/jpg',
    Png: 'image/png'
} as const;

export type V1AdminProductsIdFilesImagePostRequestBodyUploadMimeEnum = typeof V1AdminProductsIdFilesImagePostRequestBodyUploadMimeEnum[keyof typeof V1AdminProductsIdFilesImagePostRequestBodyUploadMimeEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200Response
 */
export interface V1AdminProductsIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsIdGet200ResponseData}
     * @memberof V1AdminProductsIdGet200Response
     */
    'data': V1AdminProductsIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseData
 */
export interface V1AdminProductsIdGet200ResponseData {
    /**
     * 
     * @type {V1AdminProductsIdGet200ResponseDataData}
     * @memberof V1AdminProductsIdGet200ResponseData
     */
    'data': V1AdminProductsIdGet200ResponseDataData;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataData
 */
export interface V1AdminProductsIdGet200ResponseDataData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'type'?: V1AdminProductsIdGet200ResponseDataDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'category'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'currency'?: V1AdminProductsIdGet200ResponseDataDataCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'buyMinimumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'buyMaximumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'buyGroupOfQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'sku'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'stockQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'visiblility'?: V1AdminProductsIdGet200ResponseDataDataVisiblilityEnum;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataStoresInner>}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'stores'?: Array<V1AdminProductsIdGet200ResponseDataDataStoresInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataDiscountsInner>}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'discounts'?: Array<V1AdminProductsIdGet200ResponseDataDataDiscountsInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataReviewsInner>}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'reviews'?: Array<V1AdminProductsIdGet200ResponseDataDataReviewsInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataAttributesInner>}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'attributes'?: Array<V1AdminProductsIdGet200ResponseDataDataAttributesInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataFilesInner>}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'files'?: Array<V1AdminProductsIdGet200ResponseDataDataFilesInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>}
     * @memberof V1AdminProductsIdGet200ResponseDataData
     */
    'eventLogs'?: Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>;
}

export const V1AdminProductsIdGet200ResponseDataDataTypeEnum = {
    Basic: 'basic',
    Group: 'group'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataTypeEnum = typeof V1AdminProductsIdGet200ResponseDataDataTypeEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataTypeEnum];
export const V1AdminProductsIdGet200ResponseDataDataCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataCurrencyEnum = typeof V1AdminProductsIdGet200ResponseDataDataCurrencyEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataCurrencyEnum];
export const V1AdminProductsIdGet200ResponseDataDataVisiblilityEnum = {
    Visible: 'visible',
    Hidden: 'hidden'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataVisiblilityEnum = typeof V1AdminProductsIdGet200ResponseDataDataVisiblilityEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataVisiblilityEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataDataAttributesInner
 */
export interface V1AdminProductsIdGet200ResponseDataDataAttributesInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataAttributesInner
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataDataDiscountsInner
 */
export interface V1AdminProductsIdGet200ResponseDataDataDiscountsInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'currency'?: V1AdminProductsIdGet200ResponseDataDataDiscountsInnerCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataDataDiscountsInner
     */
    'price'?: number | null;
}

export const V1AdminProductsIdGet200ResponseDataDataDiscountsInnerCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataDiscountsInnerCurrencyEnum = typeof V1AdminProductsIdGet200ResponseDataDataDiscountsInnerCurrencyEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataDiscountsInnerCurrencyEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataDataEventLogsInner
 */
export interface V1AdminProductsIdGet200ResponseDataDataEventLogsInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'type': V1AdminProductsIdGet200ResponseDataDataEventLogsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'dataId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'sessionUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataEventLogsInner
     */
    'data'?: string | null;
}

export const V1AdminProductsIdGet200ResponseDataDataEventLogsInnerTypeEnum = {
    FileCreated: 'file.created',
    FileUpdated: 'file.updated',
    FileDeleted: 'file.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    ProductAttributeCreated: 'product.attribute.created',
    ProductAttributeUpdated: 'product.attribute.updated',
    ProductAttributeDeleted: 'product.attribute.deleted',
    ProductDiscountCreated: 'product.discount.created',
    ProductDiscountDeleted: 'product.discount.deleted',
    ProductReviewCreated: 'product.review.created',
    ProductReviewUpdated: 'product.review.updated',
    ProductReviewDeleted: 'product.review.deleted',
    ProductStoreCreated: 'product.store.created',
    ProductStoreDeleted: 'product.store.deleted',
    ProductOrderCreated: 'product.order.created',
    ProductFileCreated: 'product.file.created',
    ProductFileDeleted: 'product.file.deleted',
    StoreCreated: 'store.created',
    StoreUpdated: 'store.updated',
    StoreDeleted: 'store.deleted',
    StoreProductCreated: 'store.product.created',
    StoreProductDeleted: 'store.product.deleted',
    StoreReviewCreated: 'store.review.created',
    StoreReviewUpdated: 'store.review.updated',
    StoreReviewDeleted: 'store.review.deleted',
    StoreFileCreated: 'store.file.created',
    StoreFileDeleted: 'store.file.deleted',
    OrderCreated: 'order.created',
    OrderProductCreated: 'order.product.created',
    OrderHistoryCreated: 'order.history.created',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceLineItemCreated: 'invoice.line_item.created',
    InvoiceLineItemUpdated: 'invoice.line_item.updated',
    InvoiceLineItemDeleted: 'invoice.line_item.deleted'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataEventLogsInnerTypeEnum = typeof V1AdminProductsIdGet200ResponseDataDataEventLogsInnerTypeEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataEventLogsInnerTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataDataFilesInner
 */
export interface V1AdminProductsIdGet200ResponseDataDataFilesInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'type'?: V1AdminProductsIdGet200ResponseDataDataFilesInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataFilesInner
     */
    'path'?: string | null;
}

export const V1AdminProductsIdGet200ResponseDataDataFilesInnerTypeEnum = {
    Filesystem: 'filesystem',
    S3: 's3'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataFilesInnerTypeEnum = typeof V1AdminProductsIdGet200ResponseDataDataFilesInnerTypeEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataFilesInnerTypeEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataDataReviewsInner
 */
export interface V1AdminProductsIdGet200ResponseDataDataReviewsInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'status'?: V1AdminProductsIdGet200ResponseDataDataReviewsInnerStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'ratings'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataReviewsInner
     */
    'comments'?: string | null;
}

export const V1AdminProductsIdGet200ResponseDataDataReviewsInnerStatusEnum = {
    Approved: 'approved',
    Spam: 'spam',
    Deleted: 'deleted'
} as const;

export type V1AdminProductsIdGet200ResponseDataDataReviewsInnerStatusEnum = typeof V1AdminProductsIdGet200ResponseDataDataReviewsInnerStatusEnum[keyof typeof V1AdminProductsIdGet200ResponseDataDataReviewsInnerStatusEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsIdGet200ResponseDataDataStoresInner
 */
export interface V1AdminProductsIdGet200ResponseDataDataStoresInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'addressCity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'addressCountry'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'addressState'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'addressLine1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'addressLine2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'addressPostalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'openingHours'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdGet200ResponseDataDataStoresInner
     */
    'contactNumbers'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdPatch200Response
 */
export interface V1AdminProductsIdPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminProductsIdPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminProductsIdPatchRequestBody
 */
export interface V1AdminProductsIdPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'category'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'currency'?: V1AdminProductsIdPatchRequestBodyCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'buyMinimumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'buyMaximumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'buyGroupOfQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'sku'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'stockQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsIdPatchRequestBody
     */
    'visiblility'?: V1AdminProductsIdPatchRequestBodyVisiblilityEnum;
}

export const V1AdminProductsIdPatchRequestBodyCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminProductsIdPatchRequestBodyCurrencyEnum = typeof V1AdminProductsIdPatchRequestBodyCurrencyEnum[keyof typeof V1AdminProductsIdPatchRequestBodyCurrencyEnum];
export const V1AdminProductsIdPatchRequestBodyVisiblilityEnum = {
    Visible: 'visible',
    Hidden: 'hidden'
} as const;

export type V1AdminProductsIdPatchRequestBodyVisiblilityEnum = typeof V1AdminProductsIdPatchRequestBodyVisiblilityEnum[keyof typeof V1AdminProductsIdPatchRequestBodyVisiblilityEnum];

/**
 * 
 * @export
 * @interface V1AdminProductsPost200Response
 */
export interface V1AdminProductsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsPost200ResponseData}
     * @memberof V1AdminProductsPost200Response
     */
    'data': V1AdminProductsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminProductsPost200ResponseData
 */
export interface V1AdminProductsPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPost200ResponseData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface V1AdminProductsPostRequestBody
 */
export interface V1AdminProductsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'type'?: V1AdminProductsPostRequestBodyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'category'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'currency'?: V1AdminProductsPostRequestBodyCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsPostRequestBody
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsPostRequestBody
     */
    'buyMinimumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsPostRequestBody
     */
    'buyMaximumQuantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsPostRequestBody
     */
    'buyGroupOfQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'sku'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof V1AdminProductsPostRequestBody
     */
    'stockQuantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminProductsPostRequestBody
     */
    'visiblility'?: V1AdminProductsPostRequestBodyVisiblilityEnum;
}

export const V1AdminProductsPostRequestBodyTypeEnum = {
    Basic: 'basic',
    Group: 'group'
} as const;

export type V1AdminProductsPostRequestBodyTypeEnum = typeof V1AdminProductsPostRequestBodyTypeEnum[keyof typeof V1AdminProductsPostRequestBodyTypeEnum];
export const V1AdminProductsPostRequestBodyCurrencyEnum = {
    Sgd: 'SGD'
} as const;

export type V1AdminProductsPostRequestBodyCurrencyEnum = typeof V1AdminProductsPostRequestBodyCurrencyEnum[keyof typeof V1AdminProductsPostRequestBodyCurrencyEnum];
export const V1AdminProductsPostRequestBodyVisiblilityEnum = {
    Visible: 'visible',
    Hidden: 'hidden'
} as const;

export type V1AdminProductsPostRequestBodyVisiblilityEnum = typeof V1AdminProductsPostRequestBodyVisiblilityEnum[keyof typeof V1AdminProductsPostRequestBodyVisiblilityEnum];

/**
 * 
 * @export
 * @interface V1AdminStoresFilesStoreFileIdDelete200Response
 */
export interface V1AdminStoresFilesStoreFileIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresFilesStoreFileIdDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresFilesStoreFileIdDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminStoresFilesStoreFileIdDelete200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminStoresGet200Response
 */
export interface V1AdminStoresGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminStoresGet200ResponseData}
     * @memberof V1AdminStoresGet200Response
     */
    'data': V1AdminStoresGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminStoresGet200ResponseData
 */
export interface V1AdminStoresGet200ResponseData {
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataStoresInner>}
     * @memberof V1AdminStoresGet200ResponseData
     */
    'data': Array<V1AdminProductsIdGet200ResponseDataDataStoresInner>;
    /**
     * 
     * @type {number}
     * @memberof V1AdminStoresGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdDelete200Response
 */
export interface V1AdminStoresIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminStoresIdDelete200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdFilesImagePost200Response
 */
export interface V1AdminStoresIdFilesImagePost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdFilesImagePost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdFilesImagePost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminStoresIdFilesImagePost200ResponseData}
     * @memberof V1AdminStoresIdFilesImagePost200Response
     */
    'data': V1AdminStoresIdFilesImagePost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdFilesImagePost200ResponseData
 */
export interface V1AdminStoresIdFilesImagePost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdFilesImagePost200ResponseData
     */
    'fileId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdFilesImagePost200ResponseData
     */
    'storeFileId': string;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdFilesImagePostRequestBody
 */
export interface V1AdminStoresIdFilesImagePostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdFilesImagePostRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {V1AdminProductsIdFilesImagePostRequestBodyUpload}
     * @memberof V1AdminStoresIdFilesImagePostRequestBody
     */
    'upload': V1AdminProductsIdFilesImagePostRequestBodyUpload;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdGet200Response
 */
export interface V1AdminStoresIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminStoresIdGet200ResponseData}
     * @memberof V1AdminStoresIdGet200Response
     */
    'data': V1AdminStoresIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdGet200ResponseData
 */
export interface V1AdminStoresIdGet200ResponseData {
    /**
     * 
     * @type {V1AdminStoresIdGet200ResponseDataData}
     * @memberof V1AdminStoresIdGet200ResponseData
     */
    'data': V1AdminStoresIdGet200ResponseDataData;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdGet200ResponseDataData
 */
export interface V1AdminStoresIdGet200ResponseDataData {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'addressCity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'addressCountry'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'addressState'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'addressLine1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'addressLine2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'addressPostalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'openingHours'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'contactNumbers'?: string | null;
    /**
     * 
     * @type {Array<V1AdminProductsGet200ResponseDataDataInner>}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'products'?: Array<V1AdminProductsGet200ResponseDataDataInner>;
    /**
     * 
     * @type {Array<V1AdminStoresIdGet200ResponseDataDataReviewsInner>}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'reviews'?: Array<V1AdminStoresIdGet200ResponseDataDataReviewsInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataFilesInner>}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'files'?: Array<V1AdminProductsIdGet200ResponseDataDataFilesInner>;
    /**
     * 
     * @type {Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>}
     * @memberof V1AdminStoresIdGet200ResponseDataData
     */
    'eventLogs'?: Array<V1AdminProductsIdGet200ResponseDataDataEventLogsInner>;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdGet200ResponseDataDataReviewsInner
 */
export interface V1AdminStoresIdGet200ResponseDataDataReviewsInner {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'status'?: V1AdminStoresIdGet200ResponseDataDataReviewsInnerStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'ratings'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdGet200ResponseDataDataReviewsInner
     */
    'comments'?: string | null;
}

export const V1AdminStoresIdGet200ResponseDataDataReviewsInnerStatusEnum = {
    Approved: 'approved',
    Spam: 'spam',
    Deleted: 'deleted'
} as const;

export type V1AdminStoresIdGet200ResponseDataDataReviewsInnerStatusEnum = typeof V1AdminStoresIdGet200ResponseDataDataReviewsInnerStatusEnum[keyof typeof V1AdminStoresIdGet200ResponseDataDataReviewsInnerStatusEnum];

/**
 * 
 * @export
 * @interface V1AdminStoresIdPatch200Response
 */
export interface V1AdminStoresIdPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatch200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatch200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1AdminStoresIdPatch200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1AdminStoresIdPatchRequestBody
 */
export interface V1AdminStoresIdPatchRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'addressCity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'addressCountry'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'addressState'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'addressLine1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'addressLine2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'addressPostalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'openingHours'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresIdPatchRequestBody
     */
    'contactNumbers'?: string | null;
}
/**
 * 
 * @export
 * @interface V1AdminStoresPost200Response
 */
export interface V1AdminStoresPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1AdminProductsPost200ResponseData}
     * @memberof V1AdminStoresPost200Response
     */
    'data': V1AdminProductsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1AdminStoresPostRequestBody
 */
export interface V1AdminStoresPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'addressCity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'addressCountry'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'addressState'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'addressLine1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'addressLine2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'addressPostalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'openingHours'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1AdminStoresPostRequestBody
     */
    'contactNumbers'?: string | null;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get configs
         * @summary Get configs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'key' | 'value', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get config
         * @summary Get config
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminConfigsIdGet', 'id', id)
            const localVarPath = `/v1/admin/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update config
         * @summary Update config
         * @param {string} id 
         * @param {V1AdminConfigsIdPatchRequestBody} v1AdminConfigsIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdPatch: async (id: string, v1AdminConfigsIdPatchRequestBody: V1AdminConfigsIdPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminConfigsIdPatch', 'id', id)
            // verify required parameter 'v1AdminConfigsIdPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminConfigsIdPatch', 'v1AdminConfigsIdPatchRequestBody', v1AdminConfigsIdPatchRequestBody)
            const localVarPath = `/v1/admin/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminConfigsIdPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create config
         * @summary Create config
         * @param {V1AdminConfigsPostRequestBody} v1AdminConfigsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsPost: async (v1AdminConfigsPostRequestBody: V1AdminConfigsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminConfigsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminConfigsPost', 'v1AdminConfigsPostRequestBody', v1AdminConfigsPostRequestBody)
            const localVarPath = `/v1/admin/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminConfigsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get event logs
         * @summary Get event logs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/event_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create event log
         * @summary Create event log
         * @param {V1AdminEventLogsPostRequestBody} v1AdminEventLogsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsPost: async (v1AdminEventLogsPostRequestBody: V1AdminEventLogsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminEventLogsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminEventLogsPost', 'v1AdminEventLogsPostRequestBody', v1AdminEventLogsPostRequestBody)
            const localVarPath = `/v1/admin/event_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminEventLogsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {'day'} [interval] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsStatsGet: async (interval?: 'day', from?: string, to?: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/event_logs/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get orders
         * @summary Get orders
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'customerId' | 'currency' | 'totalPrice' | 'totalDiscount'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<'products' | 'histories' | 'eventLogs'>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminOrdersGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'customerId' | 'currency' | 'totalPrice' | 'totalDiscount', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<'products' | 'histories' | 'eventLogs'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get order
         * @summary Get order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminOrdersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminOrdersIdGet', 'id', id)
            const localVarPath = `/v1/admin/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create order
         * @summary Create order
         * @param {V1AdminOrdersPostRequestBody} v1AdminOrdersPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminOrdersPost: async (v1AdminOrdersPostRequestBody: V1AdminOrdersPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminOrdersPostRequestBody' is not null or undefined
            assertParamExists('v1AdminOrdersPost', 'v1AdminOrdersPostRequestBody', v1AdminOrdersPostRequestBody)
            const localVarPath = `/v1/admin/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminOrdersPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete product file
         * @summary Delete product file
         * @param {string} productFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsFilesProductFileIdDelete: async (productFileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productFileId' is not null or undefined
            assertParamExists('v1AdminProductsFilesProductFileIdDelete', 'productFileId', productFileId)
            const localVarPath = `/v1/admin/products/files/{productFileId}`
                .replace(`{${"productFileId"}}`, encodeURIComponent(String(productFileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get products
         * @summary Get products
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'expiresAt' | 'type' | 'category' | 'name' | 'summary' | 'description' | 'currency' | 'price' | 'buyMinimumQuantity' | 'buyMaximumQuantity' | 'buyGroupOfQuantity' | 'sku' | 'stockQuantity' | 'visiblility'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<'stores' | 'discounts' | 'reviews' | 'attributes' | 'files' | 'eventLogs'>} [expand] 
         * @param {string} [typeEq] 
         * @param {string} [typeNotEq] 
         * @param {string} [typeLike] 
         * @param {string} [typeLt] 
         * @param {string} [typeLte] 
         * @param {string} [typeGt] 
         * @param {string} [typeGte] 
         * @param {boolean} [typeIsNull] 
         * @param {boolean} [typeIsNotNull] 
         * @param {string} [categoryEq] 
         * @param {string} [categoryNotEq] 
         * @param {string} [categoryLike] 
         * @param {string} [categoryLt] 
         * @param {string} [categoryLte] 
         * @param {string} [categoryGt] 
         * @param {string} [categoryGte] 
         * @param {boolean} [categoryIsNull] 
         * @param {boolean} [categoryIsNotNull] 
         * @param {string} [nameEq] 
         * @param {string} [nameNotEq] 
         * @param {string} [nameLike] 
         * @param {string} [nameLt] 
         * @param {string} [nameLte] 
         * @param {string} [nameGt] 
         * @param {string} [nameGte] 
         * @param {boolean} [nameIsNull] 
         * @param {boolean} [nameIsNotNull] 
         * @param {number} [priceEq] 
         * @param {number} [priceNotEq] 
         * @param {number} [priceLt] 
         * @param {number} [priceLte] 
         * @param {number} [priceGt] 
         * @param {number} [priceGte] 
         * @param {boolean} [priceIsNull] 
         * @param {boolean} [priceIsNotNull] 
         * @param {string} [skuEq] 
         * @param {string} [skuNotEq] 
         * @param {string} [skuLike] 
         * @param {string} [skuLt] 
         * @param {string} [skuLte] 
         * @param {string} [skuGt] 
         * @param {string} [skuGte] 
         * @param {boolean} [skuIsNull] 
         * @param {boolean} [skuIsNotNull] 
         * @param {number} [stockQuantityEq] 
         * @param {number} [stockQuantityNotEq] 
         * @param {number} [stockQuantityLt] 
         * @param {number} [stockQuantityLte] 
         * @param {number} [stockQuantityGt] 
         * @param {number} [stockQuantityGte] 
         * @param {boolean} [stockQuantityIsNull] 
         * @param {boolean} [stockQuantityIsNotNull] 
         * @param {string} [visiblilityEq] 
         * @param {string} [visiblilityNotEq] 
         * @param {string} [visiblilityLike] 
         * @param {string} [visiblilityLt] 
         * @param {string} [visiblilityLte] 
         * @param {string} [visiblilityGt] 
         * @param {string} [visiblilityGte] 
         * @param {boolean} [visiblilityIsNull] 
         * @param {boolean} [visiblilityIsNotNull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'expiresAt' | 'type' | 'category' | 'name' | 'summary' | 'description' | 'currency' | 'price' | 'buyMinimumQuantity' | 'buyMaximumQuantity' | 'buyGroupOfQuantity' | 'sku' | 'stockQuantity' | 'visiblility', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<'stores' | 'discounts' | 'reviews' | 'attributes' | 'files' | 'eventLogs'>, typeEq?: string, typeNotEq?: string, typeLike?: string, typeLt?: string, typeLte?: string, typeGt?: string, typeGte?: string, typeIsNull?: boolean, typeIsNotNull?: boolean, categoryEq?: string, categoryNotEq?: string, categoryLike?: string, categoryLt?: string, categoryLte?: string, categoryGt?: string, categoryGte?: string, categoryIsNull?: boolean, categoryIsNotNull?: boolean, nameEq?: string, nameNotEq?: string, nameLike?: string, nameLt?: string, nameLte?: string, nameGt?: string, nameGte?: string, nameIsNull?: boolean, nameIsNotNull?: boolean, priceEq?: number, priceNotEq?: number, priceLt?: number, priceLte?: number, priceGt?: number, priceGte?: number, priceIsNull?: boolean, priceIsNotNull?: boolean, skuEq?: string, skuNotEq?: string, skuLike?: string, skuLt?: string, skuLte?: string, skuGt?: string, skuGte?: string, skuIsNull?: boolean, skuIsNotNull?: boolean, stockQuantityEq?: number, stockQuantityNotEq?: number, stockQuantityLt?: number, stockQuantityLte?: number, stockQuantityGt?: number, stockQuantityGte?: number, stockQuantityIsNull?: boolean, stockQuantityIsNotNull?: boolean, visiblilityEq?: string, visiblilityNotEq?: string, visiblilityLike?: string, visiblilityLt?: string, visiblilityLte?: string, visiblilityGt?: string, visiblilityGte?: string, visiblilityIsNull?: boolean, visiblilityIsNotNull?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (typeEq !== undefined) {
                localVarQueryParameter['type.eq'] = typeEq;
            }

            if (typeNotEq !== undefined) {
                localVarQueryParameter['type.notEq'] = typeNotEq;
            }

            if (typeLike !== undefined) {
                localVarQueryParameter['type.like'] = typeLike;
            }

            if (typeLt !== undefined) {
                localVarQueryParameter['type.lt'] = typeLt;
            }

            if (typeLte !== undefined) {
                localVarQueryParameter['type.lte'] = typeLte;
            }

            if (typeGt !== undefined) {
                localVarQueryParameter['type.gt'] = typeGt;
            }

            if (typeGte !== undefined) {
                localVarQueryParameter['type.gte'] = typeGte;
            }

            if (typeIsNull !== undefined) {
                localVarQueryParameter['type.isNull'] = typeIsNull;
            }

            if (typeIsNotNull !== undefined) {
                localVarQueryParameter['type.isNotNull'] = typeIsNotNull;
            }

            if (categoryEq !== undefined) {
                localVarQueryParameter['category.eq'] = categoryEq;
            }

            if (categoryNotEq !== undefined) {
                localVarQueryParameter['category.notEq'] = categoryNotEq;
            }

            if (categoryLike !== undefined) {
                localVarQueryParameter['category.like'] = categoryLike;
            }

            if (categoryLt !== undefined) {
                localVarQueryParameter['category.lt'] = categoryLt;
            }

            if (categoryLte !== undefined) {
                localVarQueryParameter['category.lte'] = categoryLte;
            }

            if (categoryGt !== undefined) {
                localVarQueryParameter['category.gt'] = categoryGt;
            }

            if (categoryGte !== undefined) {
                localVarQueryParameter['category.gte'] = categoryGte;
            }

            if (categoryIsNull !== undefined) {
                localVarQueryParameter['category.isNull'] = categoryIsNull;
            }

            if (categoryIsNotNull !== undefined) {
                localVarQueryParameter['category.isNotNull'] = categoryIsNotNull;
            }

            if (nameEq !== undefined) {
                localVarQueryParameter['name.eq'] = nameEq;
            }

            if (nameNotEq !== undefined) {
                localVarQueryParameter['name.notEq'] = nameNotEq;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['name.like'] = nameLike;
            }

            if (nameLt !== undefined) {
                localVarQueryParameter['name.lt'] = nameLt;
            }

            if (nameLte !== undefined) {
                localVarQueryParameter['name.lte'] = nameLte;
            }

            if (nameGt !== undefined) {
                localVarQueryParameter['name.gt'] = nameGt;
            }

            if (nameGte !== undefined) {
                localVarQueryParameter['name.gte'] = nameGte;
            }

            if (nameIsNull !== undefined) {
                localVarQueryParameter['name.isNull'] = nameIsNull;
            }

            if (nameIsNotNull !== undefined) {
                localVarQueryParameter['name.isNotNull'] = nameIsNotNull;
            }

            if (priceEq !== undefined) {
                localVarQueryParameter['price.eq'] = priceEq;
            }

            if (priceNotEq !== undefined) {
                localVarQueryParameter['price.notEq'] = priceNotEq;
            }

            if (priceLt !== undefined) {
                localVarQueryParameter['price.lt'] = priceLt;
            }

            if (priceLte !== undefined) {
                localVarQueryParameter['price.lte'] = priceLte;
            }

            if (priceGt !== undefined) {
                localVarQueryParameter['price.gt'] = priceGt;
            }

            if (priceGte !== undefined) {
                localVarQueryParameter['price.gte'] = priceGte;
            }

            if (priceIsNull !== undefined) {
                localVarQueryParameter['price.isNull'] = priceIsNull;
            }

            if (priceIsNotNull !== undefined) {
                localVarQueryParameter['price.isNotNull'] = priceIsNotNull;
            }

            if (skuEq !== undefined) {
                localVarQueryParameter['sku.eq'] = skuEq;
            }

            if (skuNotEq !== undefined) {
                localVarQueryParameter['sku.notEq'] = skuNotEq;
            }

            if (skuLike !== undefined) {
                localVarQueryParameter['sku.like'] = skuLike;
            }

            if (skuLt !== undefined) {
                localVarQueryParameter['sku.lt'] = skuLt;
            }

            if (skuLte !== undefined) {
                localVarQueryParameter['sku.lte'] = skuLte;
            }

            if (skuGt !== undefined) {
                localVarQueryParameter['sku.gt'] = skuGt;
            }

            if (skuGte !== undefined) {
                localVarQueryParameter['sku.gte'] = skuGte;
            }

            if (skuIsNull !== undefined) {
                localVarQueryParameter['sku.isNull'] = skuIsNull;
            }

            if (skuIsNotNull !== undefined) {
                localVarQueryParameter['sku.isNotNull'] = skuIsNotNull;
            }

            if (stockQuantityEq !== undefined) {
                localVarQueryParameter['stockQuantity.eq'] = stockQuantityEq;
            }

            if (stockQuantityNotEq !== undefined) {
                localVarQueryParameter['stockQuantity.notEq'] = stockQuantityNotEq;
            }

            if (stockQuantityLt !== undefined) {
                localVarQueryParameter['stockQuantity.lt'] = stockQuantityLt;
            }

            if (stockQuantityLte !== undefined) {
                localVarQueryParameter['stockQuantity.lte'] = stockQuantityLte;
            }

            if (stockQuantityGt !== undefined) {
                localVarQueryParameter['stockQuantity.gt'] = stockQuantityGt;
            }

            if (stockQuantityGte !== undefined) {
                localVarQueryParameter['stockQuantity.gte'] = stockQuantityGte;
            }

            if (stockQuantityIsNull !== undefined) {
                localVarQueryParameter['stockQuantity.isNull'] = stockQuantityIsNull;
            }

            if (stockQuantityIsNotNull !== undefined) {
                localVarQueryParameter['stockQuantity.isNotNull'] = stockQuantityIsNotNull;
            }

            if (visiblilityEq !== undefined) {
                localVarQueryParameter['visiblility.eq'] = visiblilityEq;
            }

            if (visiblilityNotEq !== undefined) {
                localVarQueryParameter['visiblility.notEq'] = visiblilityNotEq;
            }

            if (visiblilityLike !== undefined) {
                localVarQueryParameter['visiblility.like'] = visiblilityLike;
            }

            if (visiblilityLt !== undefined) {
                localVarQueryParameter['visiblility.lt'] = visiblilityLt;
            }

            if (visiblilityLte !== undefined) {
                localVarQueryParameter['visiblility.lte'] = visiblilityLte;
            }

            if (visiblilityGt !== undefined) {
                localVarQueryParameter['visiblility.gt'] = visiblilityGt;
            }

            if (visiblilityGte !== undefined) {
                localVarQueryParameter['visiblility.gte'] = visiblilityGte;
            }

            if (visiblilityIsNull !== undefined) {
                localVarQueryParameter['visiblility.isNull'] = visiblilityIsNull;
            }

            if (visiblilityIsNotNull !== undefined) {
                localVarQueryParameter['visiblility.isNotNull'] = visiblilityIsNotNull;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete product
         * @summary Delete product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminProductsIdDelete', 'id', id)
            const localVarPath = `/v1/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create product image file
         * @summary Create product image file
         * @param {string} id 
         * @param {V1AdminProductsIdFilesImagePostRequestBody} v1AdminProductsIdFilesImagePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdFilesImagePost: async (id: string, v1AdminProductsIdFilesImagePostRequestBody: V1AdminProductsIdFilesImagePostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminProductsIdFilesImagePost', 'id', id)
            // verify required parameter 'v1AdminProductsIdFilesImagePostRequestBody' is not null or undefined
            assertParamExists('v1AdminProductsIdFilesImagePost', 'v1AdminProductsIdFilesImagePostRequestBody', v1AdminProductsIdFilesImagePostRequestBody)
            const localVarPath = `/v1/admin/products/{id}/files/image`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminProductsIdFilesImagePostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get product
         * @summary Get product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminProductsIdGet', 'id', id)
            const localVarPath = `/v1/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product
         * @summary Update product
         * @param {string} id 
         * @param {V1AdminProductsIdPatchRequestBody} v1AdminProductsIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdPatch: async (id: string, v1AdminProductsIdPatchRequestBody: V1AdminProductsIdPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminProductsIdPatch', 'id', id)
            // verify required parameter 'v1AdminProductsIdPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminProductsIdPatch', 'v1AdminProductsIdPatchRequestBody', v1AdminProductsIdPatchRequestBody)
            const localVarPath = `/v1/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminProductsIdPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create product
         * @summary Create product
         * @param {V1AdminProductsPostRequestBody} v1AdminProductsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsPost: async (v1AdminProductsPostRequestBody: V1AdminProductsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminProductsPostRequestBody' is not null or undefined
            assertParamExists('v1AdminProductsPost', 'v1AdminProductsPostRequestBody', v1AdminProductsPostRequestBody)
            const localVarPath = `/v1/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminProductsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete store file
         * @summary Delete store file
         * @param {string} storeFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresFilesStoreFileIdDelete: async (storeFileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeFileId' is not null or undefined
            assertParamExists('v1AdminStoresFilesStoreFileIdDelete', 'storeFileId', storeFileId)
            const localVarPath = `/v1/admin/stores/files/{storeFileId}`
                .replace(`{${"storeFileId"}}`, encodeURIComponent(String(storeFileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stores
         * @summary Get stores
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'name' | 'description' | 'addressCity' | 'addressCountry' | 'addressState' | 'addressLine1' | 'addressLine2' | 'addressPostalCode' | 'openingHours' | 'contactNumbers'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<'products' | 'reviews' | 'files' | 'eventLogs'>} [expand] 
         * @param {string} [nameEq] 
         * @param {string} [nameNotEq] 
         * @param {string} [nameLike] 
         * @param {string} [nameLt] 
         * @param {string} [nameLte] 
         * @param {string} [nameGt] 
         * @param {string} [nameGte] 
         * @param {boolean} [nameIsNull] 
         * @param {boolean} [nameIsNotNull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresGet: async (ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'name' | 'description' | 'addressCity' | 'addressCountry' | 'addressState' | 'addressLine1' | 'addressLine2' | 'addressPostalCode' | 'openingHours' | 'contactNumbers', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<'products' | 'reviews' | 'files' | 'eventLogs'>, nameEq?: string, nameNotEq?: string, nameLike?: string, nameLt?: string, nameLte?: string, nameGt?: string, nameGte?: string, nameIsNull?: boolean, nameIsNotNull?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortColumn !== undefined) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (countOnly !== undefined) {
                localVarQueryParameter['countOnly'] = countOnly;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (nameEq !== undefined) {
                localVarQueryParameter['name.eq'] = nameEq;
            }

            if (nameNotEq !== undefined) {
                localVarQueryParameter['name.notEq'] = nameNotEq;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['name.like'] = nameLike;
            }

            if (nameLt !== undefined) {
                localVarQueryParameter['name.lt'] = nameLt;
            }

            if (nameLte !== undefined) {
                localVarQueryParameter['name.lte'] = nameLte;
            }

            if (nameGt !== undefined) {
                localVarQueryParameter['name.gt'] = nameGt;
            }

            if (nameGte !== undefined) {
                localVarQueryParameter['name.gte'] = nameGte;
            }

            if (nameIsNull !== undefined) {
                localVarQueryParameter['name.isNull'] = nameIsNull;
            }

            if (nameIsNotNull !== undefined) {
                localVarQueryParameter['name.isNotNull'] = nameIsNotNull;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete store
         * @summary Delete store
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminStoresIdDelete', 'id', id)
            const localVarPath = `/v1/admin/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create store image file
         * @summary Create store image file
         * @param {string} id 
         * @param {V1AdminStoresIdFilesImagePostRequestBody} v1AdminStoresIdFilesImagePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdFilesImagePost: async (id: string, v1AdminStoresIdFilesImagePostRequestBody: V1AdminStoresIdFilesImagePostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminStoresIdFilesImagePost', 'id', id)
            // verify required parameter 'v1AdminStoresIdFilesImagePostRequestBody' is not null or undefined
            assertParamExists('v1AdminStoresIdFilesImagePost', 'v1AdminStoresIdFilesImagePostRequestBody', v1AdminStoresIdFilesImagePostRequestBody)
            const localVarPath = `/v1/admin/stores/{id}/files/image`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminStoresIdFilesImagePostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get store
         * @summary Get store
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminStoresIdGet', 'id', id)
            const localVarPath = `/v1/admin/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update store
         * @summary Update store
         * @param {string} id 
         * @param {V1AdminStoresIdPatchRequestBody} v1AdminStoresIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdPatch: async (id: string, v1AdminStoresIdPatchRequestBody: V1AdminStoresIdPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AdminStoresIdPatch', 'id', id)
            // verify required parameter 'v1AdminStoresIdPatchRequestBody' is not null or undefined
            assertParamExists('v1AdminStoresIdPatch', 'v1AdminStoresIdPatchRequestBody', v1AdminStoresIdPatchRequestBody)
            const localVarPath = `/v1/admin/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminStoresIdPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create store
         * @summary Create store
         * @param {V1AdminStoresPostRequestBody} v1AdminStoresPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresPost: async (v1AdminStoresPostRequestBody: V1AdminStoresPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AdminStoresPostRequestBody' is not null or undefined
            assertParamExists('v1AdminStoresPost', 'v1AdminStoresPostRequestBody', v1AdminStoresPostRequestBody)
            const localVarPath = `/v1/admin/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AdminStoresPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Get configs
         * @summary Get configs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'key' | 'value', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get config
         * @summary Get config
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update config
         * @summary Update config
         * @param {string} id 
         * @param {V1AdminConfigsIdPatchRequestBody} v1AdminConfigsIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsIdPatch(id: string, v1AdminConfigsIdPatchRequestBody: V1AdminConfigsIdPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsIdPatch(id, v1AdminConfigsIdPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create config
         * @summary Create config
         * @param {V1AdminConfigsPostRequestBody} v1AdminConfigsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminConfigsPost(v1AdminConfigsPostRequestBody: V1AdminConfigsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminConfigsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminConfigsPost(v1AdminConfigsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get event logs
         * @summary Get event logs
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<''>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<''>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create event log
         * @summary Create event log
         * @param {V1AdminEventLogsPostRequestBody} v1AdminEventLogsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsPost(v1AdminEventLogsPostRequestBody: V1AdminEventLogsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsPost(v1AdminEventLogsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {'day'} [interval] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminEventLogsStatsGet(interval?: 'day', from?: string, to?: string, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminEventLogsStatsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminEventLogsStatsGet(interval, from, to, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get orders
         * @summary Get orders
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'customerId' | 'currency' | 'totalPrice' | 'totalDiscount'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<'products' | 'histories' | 'eventLogs'>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminOrdersGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'customerId' | 'currency' | 'totalPrice' | 'totalDiscount', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<'products' | 'histories' | 'eventLogs'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminOrdersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminOrdersGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get order
         * @summary Get order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminOrdersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminOrdersIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminOrdersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create order
         * @summary Create order
         * @param {V1AdminOrdersPostRequestBody} v1AdminOrdersPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminOrdersPost(v1AdminOrdersPostRequestBody: V1AdminOrdersPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminOrdersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminOrdersPost(v1AdminOrdersPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete product file
         * @summary Delete product file
         * @param {string} productFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsFilesProductFileIdDelete(productFileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsFilesProductFileIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsFilesProductFileIdDelete(productFileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get products
         * @summary Get products
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'expiresAt' | 'type' | 'category' | 'name' | 'summary' | 'description' | 'currency' | 'price' | 'buyMinimumQuantity' | 'buyMaximumQuantity' | 'buyGroupOfQuantity' | 'sku' | 'stockQuantity' | 'visiblility'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<'stores' | 'discounts' | 'reviews' | 'attributes' | 'files' | 'eventLogs'>} [expand] 
         * @param {string} [typeEq] 
         * @param {string} [typeNotEq] 
         * @param {string} [typeLike] 
         * @param {string} [typeLt] 
         * @param {string} [typeLte] 
         * @param {string} [typeGt] 
         * @param {string} [typeGte] 
         * @param {boolean} [typeIsNull] 
         * @param {boolean} [typeIsNotNull] 
         * @param {string} [categoryEq] 
         * @param {string} [categoryNotEq] 
         * @param {string} [categoryLike] 
         * @param {string} [categoryLt] 
         * @param {string} [categoryLte] 
         * @param {string} [categoryGt] 
         * @param {string} [categoryGte] 
         * @param {boolean} [categoryIsNull] 
         * @param {boolean} [categoryIsNotNull] 
         * @param {string} [nameEq] 
         * @param {string} [nameNotEq] 
         * @param {string} [nameLike] 
         * @param {string} [nameLt] 
         * @param {string} [nameLte] 
         * @param {string} [nameGt] 
         * @param {string} [nameGte] 
         * @param {boolean} [nameIsNull] 
         * @param {boolean} [nameIsNotNull] 
         * @param {number} [priceEq] 
         * @param {number} [priceNotEq] 
         * @param {number} [priceLt] 
         * @param {number} [priceLte] 
         * @param {number} [priceGt] 
         * @param {number} [priceGte] 
         * @param {boolean} [priceIsNull] 
         * @param {boolean} [priceIsNotNull] 
         * @param {string} [skuEq] 
         * @param {string} [skuNotEq] 
         * @param {string} [skuLike] 
         * @param {string} [skuLt] 
         * @param {string} [skuLte] 
         * @param {string} [skuGt] 
         * @param {string} [skuGte] 
         * @param {boolean} [skuIsNull] 
         * @param {boolean} [skuIsNotNull] 
         * @param {number} [stockQuantityEq] 
         * @param {number} [stockQuantityNotEq] 
         * @param {number} [stockQuantityLt] 
         * @param {number} [stockQuantityLte] 
         * @param {number} [stockQuantityGt] 
         * @param {number} [stockQuantityGte] 
         * @param {boolean} [stockQuantityIsNull] 
         * @param {boolean} [stockQuantityIsNotNull] 
         * @param {string} [visiblilityEq] 
         * @param {string} [visiblilityNotEq] 
         * @param {string} [visiblilityLike] 
         * @param {string} [visiblilityLt] 
         * @param {string} [visiblilityLte] 
         * @param {string} [visiblilityGt] 
         * @param {string} [visiblilityGte] 
         * @param {boolean} [visiblilityIsNull] 
         * @param {boolean} [visiblilityIsNotNull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'expiresAt' | 'type' | 'category' | 'name' | 'summary' | 'description' | 'currency' | 'price' | 'buyMinimumQuantity' | 'buyMaximumQuantity' | 'buyGroupOfQuantity' | 'sku' | 'stockQuantity' | 'visiblility', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<'stores' | 'discounts' | 'reviews' | 'attributes' | 'files' | 'eventLogs'>, typeEq?: string, typeNotEq?: string, typeLike?: string, typeLt?: string, typeLte?: string, typeGt?: string, typeGte?: string, typeIsNull?: boolean, typeIsNotNull?: boolean, categoryEq?: string, categoryNotEq?: string, categoryLike?: string, categoryLt?: string, categoryLte?: string, categoryGt?: string, categoryGte?: string, categoryIsNull?: boolean, categoryIsNotNull?: boolean, nameEq?: string, nameNotEq?: string, nameLike?: string, nameLt?: string, nameLte?: string, nameGt?: string, nameGte?: string, nameIsNull?: boolean, nameIsNotNull?: boolean, priceEq?: number, priceNotEq?: number, priceLt?: number, priceLte?: number, priceGt?: number, priceGte?: number, priceIsNull?: boolean, priceIsNotNull?: boolean, skuEq?: string, skuNotEq?: string, skuLike?: string, skuLt?: string, skuLte?: string, skuGt?: string, skuGte?: string, skuIsNull?: boolean, skuIsNotNull?: boolean, stockQuantityEq?: number, stockQuantityNotEq?: number, stockQuantityLt?: number, stockQuantityLte?: number, stockQuantityGt?: number, stockQuantityGte?: number, stockQuantityIsNull?: boolean, stockQuantityIsNotNull?: boolean, visiblilityEq?: string, visiblilityNotEq?: string, visiblilityLike?: string, visiblilityLt?: string, visiblilityLte?: string, visiblilityGt?: string, visiblilityGte?: string, visiblilityIsNull?: boolean, visiblilityIsNotNull?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, typeEq, typeNotEq, typeLike, typeLt, typeLte, typeGt, typeGte, typeIsNull, typeIsNotNull, categoryEq, categoryNotEq, categoryLike, categoryLt, categoryLte, categoryGt, categoryGte, categoryIsNull, categoryIsNotNull, nameEq, nameNotEq, nameLike, nameLt, nameLte, nameGt, nameGte, nameIsNull, nameIsNotNull, priceEq, priceNotEq, priceLt, priceLte, priceGt, priceGte, priceIsNull, priceIsNotNull, skuEq, skuNotEq, skuLike, skuLt, skuLte, skuGt, skuGte, skuIsNull, skuIsNotNull, stockQuantityEq, stockQuantityNotEq, stockQuantityLt, stockQuantityLte, stockQuantityGt, stockQuantityGte, stockQuantityIsNull, stockQuantityIsNotNull, visiblilityEq, visiblilityNotEq, visiblilityLike, visiblilityLt, visiblilityLte, visiblilityGt, visiblilityGte, visiblilityIsNull, visiblilityIsNotNull, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete product
         * @summary Delete product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create product image file
         * @summary Create product image file
         * @param {string} id 
         * @param {V1AdminProductsIdFilesImagePostRequestBody} v1AdminProductsIdFilesImagePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsIdFilesImagePost(id: string, v1AdminProductsIdFilesImagePostRequestBody: V1AdminProductsIdFilesImagePostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsIdFilesImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsIdFilesImagePost(id, v1AdminProductsIdFilesImagePostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get product
         * @summary Get product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update product
         * @summary Update product
         * @param {string} id 
         * @param {V1AdminProductsIdPatchRequestBody} v1AdminProductsIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsIdPatch(id: string, v1AdminProductsIdPatchRequestBody: V1AdminProductsIdPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsIdPatch(id, v1AdminProductsIdPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create product
         * @summary Create product
         * @param {V1AdminProductsPostRequestBody} v1AdminProductsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminProductsPost(v1AdminProductsPostRequestBody: V1AdminProductsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminProductsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminProductsPost(v1AdminProductsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete store file
         * @summary Delete store file
         * @param {string} storeFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresFilesStoreFileIdDelete(storeFileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresFilesStoreFileIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresFilesStoreFileIdDelete(storeFileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get stores
         * @summary Get stores
         * @param {Array<string>} [ids] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'name' | 'description' | 'addressCity' | 'addressCountry' | 'addressState' | 'addressLine1' | 'addressLine2' | 'addressPostalCode' | 'openingHours' | 'contactNumbers'} [sortColumn] 
         * @param {'asc' | 'desc'} [sortBy] 
         * @param {boolean} [countOnly] 
         * @param {Array<'products' | 'reviews' | 'files' | 'eventLogs'>} [expand] 
         * @param {string} [nameEq] 
         * @param {string} [nameNotEq] 
         * @param {string} [nameLike] 
         * @param {string} [nameLt] 
         * @param {string} [nameLte] 
         * @param {string} [nameGt] 
         * @param {string} [nameGte] 
         * @param {boolean} [nameIsNull] 
         * @param {boolean} [nameIsNotNull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresGet(ids?: Array<string>, start?: string, end?: string, offset?: number, limit?: number, sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'name' | 'description' | 'addressCity' | 'addressCountry' | 'addressState' | 'addressLine1' | 'addressLine2' | 'addressPostalCode' | 'openingHours' | 'contactNumbers', sortBy?: 'asc' | 'desc', countOnly?: boolean, expand?: Array<'products' | 'reviews' | 'files' | 'eventLogs'>, nameEq?: string, nameNotEq?: string, nameLike?: string, nameLt?: string, nameLte?: string, nameGt?: string, nameGte?: string, nameIsNull?: boolean, nameIsNotNull?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresGet(ids, start, end, offset, limit, sortColumn, sortBy, countOnly, expand, nameEq, nameNotEq, nameLike, nameLt, nameLte, nameGt, nameGte, nameIsNull, nameIsNotNull, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete store
         * @summary Delete store
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create store image file
         * @summary Create store image file
         * @param {string} id 
         * @param {V1AdminStoresIdFilesImagePostRequestBody} v1AdminStoresIdFilesImagePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresIdFilesImagePost(id: string, v1AdminStoresIdFilesImagePostRequestBody: V1AdminStoresIdFilesImagePostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresIdFilesImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresIdFilesImagePost(id, v1AdminStoresIdFilesImagePostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get store
         * @summary Get store
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update store
         * @summary Update store
         * @param {string} id 
         * @param {V1AdminStoresIdPatchRequestBody} v1AdminStoresIdPatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresIdPatch(id: string, v1AdminStoresIdPatchRequestBody: V1AdminStoresIdPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresIdPatch(id, v1AdminStoresIdPatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create store
         * @summary Create store
         * @param {V1AdminStoresPostRequestBody} v1AdminStoresPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AdminStoresPost(v1AdminStoresPostRequestBody: V1AdminStoresPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AdminStoresPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AdminStoresPost(v1AdminStoresPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Get configs
         * @summary Get configs
         * @param {AdminApiV1AdminConfigsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsGet(requestParameters: AdminApiV1AdminConfigsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsGet200Response> {
            return localVarFp.v1AdminConfigsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get config
         * @summary Get config
         * @param {AdminApiV1AdminConfigsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdGet(requestParameters: AdminApiV1AdminConfigsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsIdGet200Response> {
            return localVarFp.v1AdminConfigsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update config
         * @summary Update config
         * @param {AdminApiV1AdminConfigsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsIdPatch(requestParameters: AdminApiV1AdminConfigsIdPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsIdPatch200Response> {
            return localVarFp.v1AdminConfigsIdPatch(requestParameters.id, requestParameters.v1AdminConfigsIdPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create config
         * @summary Create config
         * @param {AdminApiV1AdminConfigsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminConfigsPost(requestParameters: AdminApiV1AdminConfigsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminConfigsPost200Response> {
            return localVarFp.v1AdminConfigsPost(requestParameters.v1AdminConfigsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get event logs
         * @summary Get event logs
         * @param {AdminApiV1AdminEventLogsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsGet(requestParameters: AdminApiV1AdminEventLogsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsGet200Response> {
            return localVarFp.v1AdminEventLogsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Create event log
         * @summary Create event log
         * @param {AdminApiV1AdminEventLogsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsPost(requestParameters: AdminApiV1AdminEventLogsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsPost200Response> {
            return localVarFp.v1AdminEventLogsPost(requestParameters.v1AdminEventLogsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get event logs statistics
         * @summary Get event logs statistics
         * @param {AdminApiV1AdminEventLogsStatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminEventLogsStatsGet(requestParameters: AdminApiV1AdminEventLogsStatsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminEventLogsStatsGet200Response> {
            return localVarFp.v1AdminEventLogsStatsGet(requestParameters.interval, requestParameters.from, requestParameters.to, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get orders
         * @summary Get orders
         * @param {AdminApiV1AdminOrdersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminOrdersGet(requestParameters: AdminApiV1AdminOrdersGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminOrdersGet200Response> {
            return localVarFp.v1AdminOrdersGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get order
         * @summary Get order
         * @param {AdminApiV1AdminOrdersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminOrdersIdGet(requestParameters: AdminApiV1AdminOrdersIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminOrdersIdGet200Response> {
            return localVarFp.v1AdminOrdersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create order
         * @summary Create order
         * @param {AdminApiV1AdminOrdersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminOrdersPost(requestParameters: AdminApiV1AdminOrdersPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminOrdersPost200Response> {
            return localVarFp.v1AdminOrdersPost(requestParameters.v1AdminOrdersPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete product file
         * @summary Delete product file
         * @param {AdminApiV1AdminProductsFilesProductFileIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsFilesProductFileIdDelete(requestParameters: AdminApiV1AdminProductsFilesProductFileIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsFilesProductFileIdDelete200Response> {
            return localVarFp.v1AdminProductsFilesProductFileIdDelete(requestParameters.productFileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get products
         * @summary Get products
         * @param {AdminApiV1AdminProductsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsGet(requestParameters: AdminApiV1AdminProductsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsGet200Response> {
            return localVarFp.v1AdminProductsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, requestParameters.typeEq, requestParameters.typeNotEq, requestParameters.typeLike, requestParameters.typeLt, requestParameters.typeLte, requestParameters.typeGt, requestParameters.typeGte, requestParameters.typeIsNull, requestParameters.typeIsNotNull, requestParameters.categoryEq, requestParameters.categoryNotEq, requestParameters.categoryLike, requestParameters.categoryLt, requestParameters.categoryLte, requestParameters.categoryGt, requestParameters.categoryGte, requestParameters.categoryIsNull, requestParameters.categoryIsNotNull, requestParameters.nameEq, requestParameters.nameNotEq, requestParameters.nameLike, requestParameters.nameLt, requestParameters.nameLte, requestParameters.nameGt, requestParameters.nameGte, requestParameters.nameIsNull, requestParameters.nameIsNotNull, requestParameters.priceEq, requestParameters.priceNotEq, requestParameters.priceLt, requestParameters.priceLte, requestParameters.priceGt, requestParameters.priceGte, requestParameters.priceIsNull, requestParameters.priceIsNotNull, requestParameters.skuEq, requestParameters.skuNotEq, requestParameters.skuLike, requestParameters.skuLt, requestParameters.skuLte, requestParameters.skuGt, requestParameters.skuGte, requestParameters.skuIsNull, requestParameters.skuIsNotNull, requestParameters.stockQuantityEq, requestParameters.stockQuantityNotEq, requestParameters.stockQuantityLt, requestParameters.stockQuantityLte, requestParameters.stockQuantityGt, requestParameters.stockQuantityGte, requestParameters.stockQuantityIsNull, requestParameters.stockQuantityIsNotNull, requestParameters.visiblilityEq, requestParameters.visiblilityNotEq, requestParameters.visiblilityLike, requestParameters.visiblilityLt, requestParameters.visiblilityLte, requestParameters.visiblilityGt, requestParameters.visiblilityGte, requestParameters.visiblilityIsNull, requestParameters.visiblilityIsNotNull, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete product
         * @summary Delete product
         * @param {AdminApiV1AdminProductsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdDelete(requestParameters: AdminApiV1AdminProductsIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsIdDelete200Response> {
            return localVarFp.v1AdminProductsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create product image file
         * @summary Create product image file
         * @param {AdminApiV1AdminProductsIdFilesImagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdFilesImagePost(requestParameters: AdminApiV1AdminProductsIdFilesImagePostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsIdFilesImagePost200Response> {
            return localVarFp.v1AdminProductsIdFilesImagePost(requestParameters.id, requestParameters.v1AdminProductsIdFilesImagePostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get product
         * @summary Get product
         * @param {AdminApiV1AdminProductsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdGet(requestParameters: AdminApiV1AdminProductsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsIdGet200Response> {
            return localVarFp.v1AdminProductsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product
         * @summary Update product
         * @param {AdminApiV1AdminProductsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsIdPatch(requestParameters: AdminApiV1AdminProductsIdPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsIdPatch200Response> {
            return localVarFp.v1AdminProductsIdPatch(requestParameters.id, requestParameters.v1AdminProductsIdPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create product
         * @summary Create product
         * @param {AdminApiV1AdminProductsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminProductsPost(requestParameters: AdminApiV1AdminProductsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminProductsPost200Response> {
            return localVarFp.v1AdminProductsPost(requestParameters.v1AdminProductsPostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete store file
         * @summary Delete store file
         * @param {AdminApiV1AdminStoresFilesStoreFileIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresFilesStoreFileIdDelete(requestParameters: AdminApiV1AdminStoresFilesStoreFileIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresFilesStoreFileIdDelete200Response> {
            return localVarFp.v1AdminStoresFilesStoreFileIdDelete(requestParameters.storeFileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get stores
         * @summary Get stores
         * @param {AdminApiV1AdminStoresGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresGet(requestParameters: AdminApiV1AdminStoresGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresGet200Response> {
            return localVarFp.v1AdminStoresGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, requestParameters.nameEq, requestParameters.nameNotEq, requestParameters.nameLike, requestParameters.nameLt, requestParameters.nameLte, requestParameters.nameGt, requestParameters.nameGte, requestParameters.nameIsNull, requestParameters.nameIsNotNull, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete store
         * @summary Delete store
         * @param {AdminApiV1AdminStoresIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdDelete(requestParameters: AdminApiV1AdminStoresIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresIdDelete200Response> {
            return localVarFp.v1AdminStoresIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create store image file
         * @summary Create store image file
         * @param {AdminApiV1AdminStoresIdFilesImagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdFilesImagePost(requestParameters: AdminApiV1AdminStoresIdFilesImagePostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresIdFilesImagePost200Response> {
            return localVarFp.v1AdminStoresIdFilesImagePost(requestParameters.id, requestParameters.v1AdminStoresIdFilesImagePostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get store
         * @summary Get store
         * @param {AdminApiV1AdminStoresIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdGet(requestParameters: AdminApiV1AdminStoresIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresIdGet200Response> {
            return localVarFp.v1AdminStoresIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update store
         * @summary Update store
         * @param {AdminApiV1AdminStoresIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresIdPatch(requestParameters: AdminApiV1AdminStoresIdPatchRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresIdPatch200Response> {
            return localVarFp.v1AdminStoresIdPatch(requestParameters.id, requestParameters.v1AdminStoresIdPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create store
         * @summary Create store
         * @param {AdminApiV1AdminStoresPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AdminStoresPost(requestParameters: AdminApiV1AdminStoresPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1AdminStoresPost200Response> {
            return localVarFp.v1AdminStoresPost(requestParameters.v1AdminStoresPostRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1AdminConfigsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsGetRequest
 */
export interface AdminApiV1AdminConfigsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'key' | 'value'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<''>}
     * @memberof AdminApiV1AdminConfigsGet
     */
    readonly expand?: Array<''>
}

/**
 * Request parameters for v1AdminConfigsIdGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsIdGetRequest
 */
export interface AdminApiV1AdminConfigsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminConfigsIdPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsIdPatchRequest
 */
export interface AdminApiV1AdminConfigsIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminConfigsIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {V1AdminConfigsIdPatchRequestBody}
     * @memberof AdminApiV1AdminConfigsIdPatch
     */
    readonly v1AdminConfigsIdPatchRequestBody: V1AdminConfigsIdPatchRequestBody
}

/**
 * Request parameters for v1AdminConfigsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminConfigsPostRequest
 */
export interface AdminApiV1AdminConfigsPostRequest {
    /**
     * 
     * @type {V1AdminConfigsPostRequestBody}
     * @memberof AdminApiV1AdminConfigsPost
     */
    readonly v1AdminConfigsPostRequestBody: V1AdminConfigsPostRequestBody
}

/**
 * Request parameters for v1AdminEventLogsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsGetRequest
 */
export interface AdminApiV1AdminEventLogsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'type' | 'dataId' | 'sessionUserId' | 'data'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<''>}
     * @memberof AdminApiV1AdminEventLogsGet
     */
    readonly expand?: Array<''>
}

/**
 * Request parameters for v1AdminEventLogsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsPostRequest
 */
export interface AdminApiV1AdminEventLogsPostRequest {
    /**
     * 
     * @type {V1AdminEventLogsPostRequestBody}
     * @memberof AdminApiV1AdminEventLogsPost
     */
    readonly v1AdminEventLogsPostRequestBody: V1AdminEventLogsPostRequestBody
}

/**
 * Request parameters for v1AdminEventLogsStatsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminEventLogsStatsGetRequest
 */
export interface AdminApiV1AdminEventLogsStatsGetRequest {
    /**
     * 
     * @type {'day'}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly interval?: 'day'

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly from?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly to?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminEventLogsStatsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for v1AdminOrdersGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminOrdersGetRequest
 */
export interface AdminApiV1AdminOrdersGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'customerId' | 'currency' | 'totalPrice' | 'totalDiscount'}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'customerId' | 'currency' | 'totalPrice' | 'totalDiscount'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<'products' | 'histories' | 'eventLogs'>}
     * @memberof AdminApiV1AdminOrdersGet
     */
    readonly expand?: Array<'products' | 'histories' | 'eventLogs'>
}

/**
 * Request parameters for v1AdminOrdersIdGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminOrdersIdGetRequest
 */
export interface AdminApiV1AdminOrdersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminOrdersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminOrdersPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminOrdersPostRequest
 */
export interface AdminApiV1AdminOrdersPostRequest {
    /**
     * 
     * @type {V1AdminOrdersPostRequestBody}
     * @memberof AdminApiV1AdminOrdersPost
     */
    readonly v1AdminOrdersPostRequestBody: V1AdminOrdersPostRequestBody
}

/**
 * Request parameters for v1AdminProductsFilesProductFileIdDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsFilesProductFileIdDeleteRequest
 */
export interface AdminApiV1AdminProductsFilesProductFileIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsFilesProductFileIdDelete
     */
    readonly productFileId: string
}

/**
 * Request parameters for v1AdminProductsGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsGetRequest
 */
export interface AdminApiV1AdminProductsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'expiresAt' | 'type' | 'category' | 'name' | 'summary' | 'description' | 'currency' | 'price' | 'buyMinimumQuantity' | 'buyMaximumQuantity' | 'buyGroupOfQuantity' | 'sku' | 'stockQuantity' | 'visiblility'}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'expiresAt' | 'type' | 'category' | 'name' | 'summary' | 'description' | 'currency' | 'price' | 'buyMinimumQuantity' | 'buyMaximumQuantity' | 'buyGroupOfQuantity' | 'sku' | 'stockQuantity' | 'visiblility'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<'stores' | 'discounts' | 'reviews' | 'attributes' | 'files' | 'eventLogs'>}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly expand?: Array<'stores' | 'discounts' | 'reviews' | 'attributes' | 'files' | 'eventLogs'>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeNotEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeLike?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeLt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeLte?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeGt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeGte?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly typeIsNotNull?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryNotEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryLike?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryLt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryLte?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryGt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryGte?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly categoryIsNotNull?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameNotEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameLike?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameLt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameLte?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameGt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameGte?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly nameIsNotNull?: boolean

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceEq?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceNotEq?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceLt?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceLte?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceGt?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceGte?: number

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly priceIsNotNull?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuNotEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuLike?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuLt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuLte?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuGt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuGte?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly skuIsNotNull?: boolean

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityEq?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityNotEq?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityLt?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityLte?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityGt?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityGte?: number

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly stockQuantityIsNotNull?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityNotEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityLike?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityLt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityLte?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityGt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityGte?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminProductsGet
     */
    readonly visiblilityIsNotNull?: boolean
}

/**
 * Request parameters for v1AdminProductsIdDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsIdDeleteRequest
 */
export interface AdminApiV1AdminProductsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminProductsIdFilesImagePost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsIdFilesImagePostRequest
 */
export interface AdminApiV1AdminProductsIdFilesImagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsIdFilesImagePost
     */
    readonly id: string

    /**
     * 
     * @type {V1AdminProductsIdFilesImagePostRequestBody}
     * @memberof AdminApiV1AdminProductsIdFilesImagePost
     */
    readonly v1AdminProductsIdFilesImagePostRequestBody: V1AdminProductsIdFilesImagePostRequestBody
}

/**
 * Request parameters for v1AdminProductsIdGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsIdGetRequest
 */
export interface AdminApiV1AdminProductsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminProductsIdPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsIdPatchRequest
 */
export interface AdminApiV1AdminProductsIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminProductsIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {V1AdminProductsIdPatchRequestBody}
     * @memberof AdminApiV1AdminProductsIdPatch
     */
    readonly v1AdminProductsIdPatchRequestBody: V1AdminProductsIdPatchRequestBody
}

/**
 * Request parameters for v1AdminProductsPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminProductsPostRequest
 */
export interface AdminApiV1AdminProductsPostRequest {
    /**
     * 
     * @type {V1AdminProductsPostRequestBody}
     * @memberof AdminApiV1AdminProductsPost
     */
    readonly v1AdminProductsPostRequestBody: V1AdminProductsPostRequestBody
}

/**
 * Request parameters for v1AdminStoresFilesStoreFileIdDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresFilesStoreFileIdDeleteRequest
 */
export interface AdminApiV1AdminStoresFilesStoreFileIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresFilesStoreFileIdDelete
     */
    readonly storeFileId: string
}

/**
 * Request parameters for v1AdminStoresGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresGetRequest
 */
export interface AdminApiV1AdminStoresGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly ids?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly start?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly end?: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly limit?: number

    /**
     * 
     * @type {'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'name' | 'description' | 'addressCity' | 'addressCountry' | 'addressState' | 'addressLine1' | 'addressLine2' | 'addressPostalCode' | 'openingHours' | 'contactNumbers'}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly sortColumn?: 'id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'name' | 'description' | 'addressCity' | 'addressCountry' | 'addressState' | 'addressLine1' | 'addressLine2' | 'addressPostalCode' | 'openingHours' | 'contactNumbers'

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly sortBy?: 'asc' | 'desc'

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly countOnly?: boolean

    /**
     * 
     * @type {Array<'products' | 'reviews' | 'files' | 'eventLogs'>}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly expand?: Array<'products' | 'reviews' | 'files' | 'eventLogs'>

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameNotEq?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameLike?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameLt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameLte?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameGt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameGte?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameIsNull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiV1AdminStoresGet
     */
    readonly nameIsNotNull?: boolean
}

/**
 * Request parameters for v1AdminStoresIdDelete operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresIdDeleteRequest
 */
export interface AdminApiV1AdminStoresIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminStoresIdFilesImagePost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresIdFilesImagePostRequest
 */
export interface AdminApiV1AdminStoresIdFilesImagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresIdFilesImagePost
     */
    readonly id: string

    /**
     * 
     * @type {V1AdminStoresIdFilesImagePostRequestBody}
     * @memberof AdminApiV1AdminStoresIdFilesImagePost
     */
    readonly v1AdminStoresIdFilesImagePostRequestBody: V1AdminStoresIdFilesImagePostRequestBody
}

/**
 * Request parameters for v1AdminStoresIdGet operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresIdGetRequest
 */
export interface AdminApiV1AdminStoresIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresIdGet
     */
    readonly id: string
}

/**
 * Request parameters for v1AdminStoresIdPatch operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresIdPatchRequest
 */
export interface AdminApiV1AdminStoresIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiV1AdminStoresIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {V1AdminStoresIdPatchRequestBody}
     * @memberof AdminApiV1AdminStoresIdPatch
     */
    readonly v1AdminStoresIdPatchRequestBody: V1AdminStoresIdPatchRequestBody
}

/**
 * Request parameters for v1AdminStoresPost operation in AdminApi.
 * @export
 * @interface AdminApiV1AdminStoresPostRequest
 */
export interface AdminApiV1AdminStoresPostRequest {
    /**
     * 
     * @type {V1AdminStoresPostRequestBody}
     * @memberof AdminApiV1AdminStoresPost
     */
    readonly v1AdminStoresPostRequestBody: V1AdminStoresPostRequestBody
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * Get configs
     * @summary Get configs
     * @param {AdminApiV1AdminConfigsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsGet(requestParameters: AdminApiV1AdminConfigsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get config
     * @summary Get config
     * @param {AdminApiV1AdminConfigsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsIdGet(requestParameters: AdminApiV1AdminConfigsIdGetRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update config
     * @summary Update config
     * @param {AdminApiV1AdminConfigsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsIdPatch(requestParameters: AdminApiV1AdminConfigsIdPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsIdPatch(requestParameters.id, requestParameters.v1AdminConfigsIdPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create config
     * @summary Create config
     * @param {AdminApiV1AdminConfigsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminConfigsPost(requestParameters: AdminApiV1AdminConfigsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminConfigsPost(requestParameters.v1AdminConfigsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get event logs
     * @summary Get event logs
     * @param {AdminApiV1AdminEventLogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsGet(requestParameters: AdminApiV1AdminEventLogsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create event log
     * @summary Create event log
     * @param {AdminApiV1AdminEventLogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsPost(requestParameters: AdminApiV1AdminEventLogsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsPost(requestParameters.v1AdminEventLogsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get event logs statistics
     * @summary Get event logs statistics
     * @param {AdminApiV1AdminEventLogsStatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminEventLogsStatsGet(requestParameters: AdminApiV1AdminEventLogsStatsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminEventLogsStatsGet(requestParameters.interval, requestParameters.from, requestParameters.to, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get orders
     * @summary Get orders
     * @param {AdminApiV1AdminOrdersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminOrdersGet(requestParameters: AdminApiV1AdminOrdersGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminOrdersGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get order
     * @summary Get order
     * @param {AdminApiV1AdminOrdersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminOrdersIdGet(requestParameters: AdminApiV1AdminOrdersIdGetRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminOrdersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create order
     * @summary Create order
     * @param {AdminApiV1AdminOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminOrdersPost(requestParameters: AdminApiV1AdminOrdersPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminOrdersPost(requestParameters.v1AdminOrdersPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete product file
     * @summary Delete product file
     * @param {AdminApiV1AdminProductsFilesProductFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsFilesProductFileIdDelete(requestParameters: AdminApiV1AdminProductsFilesProductFileIdDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsFilesProductFileIdDelete(requestParameters.productFileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get products
     * @summary Get products
     * @param {AdminApiV1AdminProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsGet(requestParameters: AdminApiV1AdminProductsGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, requestParameters.typeEq, requestParameters.typeNotEq, requestParameters.typeLike, requestParameters.typeLt, requestParameters.typeLte, requestParameters.typeGt, requestParameters.typeGte, requestParameters.typeIsNull, requestParameters.typeIsNotNull, requestParameters.categoryEq, requestParameters.categoryNotEq, requestParameters.categoryLike, requestParameters.categoryLt, requestParameters.categoryLte, requestParameters.categoryGt, requestParameters.categoryGte, requestParameters.categoryIsNull, requestParameters.categoryIsNotNull, requestParameters.nameEq, requestParameters.nameNotEq, requestParameters.nameLike, requestParameters.nameLt, requestParameters.nameLte, requestParameters.nameGt, requestParameters.nameGte, requestParameters.nameIsNull, requestParameters.nameIsNotNull, requestParameters.priceEq, requestParameters.priceNotEq, requestParameters.priceLt, requestParameters.priceLte, requestParameters.priceGt, requestParameters.priceGte, requestParameters.priceIsNull, requestParameters.priceIsNotNull, requestParameters.skuEq, requestParameters.skuNotEq, requestParameters.skuLike, requestParameters.skuLt, requestParameters.skuLte, requestParameters.skuGt, requestParameters.skuGte, requestParameters.skuIsNull, requestParameters.skuIsNotNull, requestParameters.stockQuantityEq, requestParameters.stockQuantityNotEq, requestParameters.stockQuantityLt, requestParameters.stockQuantityLte, requestParameters.stockQuantityGt, requestParameters.stockQuantityGte, requestParameters.stockQuantityIsNull, requestParameters.stockQuantityIsNotNull, requestParameters.visiblilityEq, requestParameters.visiblilityNotEq, requestParameters.visiblilityLike, requestParameters.visiblilityLt, requestParameters.visiblilityLte, requestParameters.visiblilityGt, requestParameters.visiblilityGte, requestParameters.visiblilityIsNull, requestParameters.visiblilityIsNotNull, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete product
     * @summary Delete product
     * @param {AdminApiV1AdminProductsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsIdDelete(requestParameters: AdminApiV1AdminProductsIdDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create product image file
     * @summary Create product image file
     * @param {AdminApiV1AdminProductsIdFilesImagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsIdFilesImagePost(requestParameters: AdminApiV1AdminProductsIdFilesImagePostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsIdFilesImagePost(requestParameters.id, requestParameters.v1AdminProductsIdFilesImagePostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get product
     * @summary Get product
     * @param {AdminApiV1AdminProductsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsIdGet(requestParameters: AdminApiV1AdminProductsIdGetRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product
     * @summary Update product
     * @param {AdminApiV1AdminProductsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsIdPatch(requestParameters: AdminApiV1AdminProductsIdPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsIdPatch(requestParameters.id, requestParameters.v1AdminProductsIdPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create product
     * @summary Create product
     * @param {AdminApiV1AdminProductsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminProductsPost(requestParameters: AdminApiV1AdminProductsPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminProductsPost(requestParameters.v1AdminProductsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete store file
     * @summary Delete store file
     * @param {AdminApiV1AdminStoresFilesStoreFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresFilesStoreFileIdDelete(requestParameters: AdminApiV1AdminStoresFilesStoreFileIdDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresFilesStoreFileIdDelete(requestParameters.storeFileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get stores
     * @summary Get stores
     * @param {AdminApiV1AdminStoresGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresGet(requestParameters: AdminApiV1AdminStoresGetRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresGet(requestParameters.ids, requestParameters.start, requestParameters.end, requestParameters.offset, requestParameters.limit, requestParameters.sortColumn, requestParameters.sortBy, requestParameters.countOnly, requestParameters.expand, requestParameters.nameEq, requestParameters.nameNotEq, requestParameters.nameLike, requestParameters.nameLt, requestParameters.nameLte, requestParameters.nameGt, requestParameters.nameGte, requestParameters.nameIsNull, requestParameters.nameIsNotNull, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete store
     * @summary Delete store
     * @param {AdminApiV1AdminStoresIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresIdDelete(requestParameters: AdminApiV1AdminStoresIdDeleteRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create store image file
     * @summary Create store image file
     * @param {AdminApiV1AdminStoresIdFilesImagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresIdFilesImagePost(requestParameters: AdminApiV1AdminStoresIdFilesImagePostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresIdFilesImagePost(requestParameters.id, requestParameters.v1AdminStoresIdFilesImagePostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get store
     * @summary Get store
     * @param {AdminApiV1AdminStoresIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresIdGet(requestParameters: AdminApiV1AdminStoresIdGetRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update store
     * @summary Update store
     * @param {AdminApiV1AdminStoresIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresIdPatch(requestParameters: AdminApiV1AdminStoresIdPatchRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresIdPatch(requestParameters.id, requestParameters.v1AdminStoresIdPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create store
     * @summary Create store
     * @param {AdminApiV1AdminStoresPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public v1AdminStoresPost(requestParameters: AdminApiV1AdminStoresPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).v1AdminStoresPost(requestParameters.v1AdminStoresPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


